{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2024-07-09T21:13:26.363012Z", "invocation_id": "9cf60ca8-92a4-40ac-ba4d-5abff0851077", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.824534Z", "completed_at": "2024-07-09T21:13:23.843790Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.845546Z", "completed_at": "2024-07-09T21:13:23.845555Z"}], "thread_id": "Thread-2", "execution_time": 0.03671598434448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_discounts_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"address_discounts_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_discounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.829623Z", "completed_at": "2024-07-09T21:13:23.844095Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.846604Z", "completed_at": "2024-07-09T21:13:23.846611Z"}], "thread_id": "Thread-4", "execution_time": 0.036659955978393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"address_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.827223Z", "completed_at": "2024-07-09T21:13:23.844371Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.847062Z", "completed_at": "2024-07-09T21:13:23.847069Z"}], "thread_id": "Thread-3", "execution_time": 0.03763127326965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_shipping_line_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"address_shipping_line_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.831745Z", "completed_at": "2024-07-09T21:13:23.844724Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.847519Z", "completed_at": "2024-07-09T21:13:23.847525Z"}], "thread_id": "Thread-5", "execution_time": 0.037200212478637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_discount_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"charge_discount_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_discount_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.837686Z", "completed_at": "2024-07-09T21:13:23.845286Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.848005Z", "completed_at": "2024-07-09T21:13:23.848009Z"}], "thread_id": "Thread-7", "execution_time": 0.037016868591308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_order_attribute_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"charge_order_attribute_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_order_attribute_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.833880Z", "completed_at": "2024-07-09T21:13:23.846016Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.848759Z", "completed_at": "2024-07-09T21:13:23.848763Z"}], "thread_id": "Thread-6", "execution_time": 0.03808283805847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_line_item_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"charge_line_item_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_line_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.840493Z", "completed_at": "2024-07-09T21:13:23.846356Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.849267Z", "completed_at": "2024-07-09T21:13:23.849273Z"}], "thread_id": "Thread-8", "execution_time": 0.03775906562805176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_shipping_line_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"charge_shipping_line_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.854566Z", "completed_at": "2024-07-09T21:13:23.872940Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.874083Z", "completed_at": "2024-07-09T21:13:23.874090Z"}], "thread_id": "Thread-2", "execution_time": 0.023135900497436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_tax_line_tmp", "compiled": true, "compiled_code": "\nselect *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"charge_tax_line_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_tax_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.857850Z", "completed_at": "2024-07-09T21:13:23.873500Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.874935Z", "completed_at": "2024-07-09T21:13:23.874938Z"}], "thread_id": "Thread-4", "execution_time": 0.023072004318237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"charge_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.860162Z", "completed_at": "2024-07-09T21:13:23.873737Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.875669Z", "completed_at": "2024-07-09T21:13:23.875676Z"}], "thread_id": "Thread-3", "execution_time": 0.023550987243652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__checkout_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"checkout_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__checkout_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.865644Z", "completed_at": "2024-07-09T21:13:23.874500Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.876670Z", "completed_at": "2024-07-09T21:13:23.876674Z"}], "thread_id": "Thread-7", "execution_time": 0.02403712272644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__discount_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"discount_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__discount_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.862784Z", "completed_at": "2024-07-09T21:13:23.874684Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.877080Z", "completed_at": "2024-07-09T21:13:23.877088Z"}], "thread_id": "Thread-5", "execution_time": 0.024687767028808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__customer_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"customer_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.867743Z", "completed_at": "2024-07-09T21:13:23.875339Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.877709Z", "completed_at": "2024-07-09T21:13:23.877712Z"}], "thread_id": "Thread-6", "execution_time": 0.024551868438720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__one_time_product_tmp", "compiled": true, "compiled_code": "\nselect *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"one_time_product_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__one_time_product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.870655Z", "completed_at": "2024-07-09T21:13:23.876103Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.878355Z", "completed_at": "2024-07-09T21:13:23.878359Z"}], "thread_id": "Thread-8", "execution_time": 0.024940967559814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order_line_item_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"order_line_item_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order_line_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.891165Z", "completed_at": "2024-07-09T21:13:23.892456Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.897326Z", "completed_at": "2024-07-09T21:13:23.897331Z"}], "thread_id": "Thread-7", "execution_time": 0.016714096069335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.892680Z", "completed_at": "2024-07-09T21:13:23.893828Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.897731Z", "completed_at": "2024-07-09T21:13:23.897734Z"}], "thread_id": "Thread-5", "execution_time": 0.01687335968017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.address_discounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.894123Z", "completed_at": "2024-07-09T21:13:23.895301Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.898251Z", "completed_at": "2024-07-09T21:13:23.898255Z"}], "thread_id": "Thread-6", "execution_time": 0.016932964324951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.address_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.882009Z", "completed_at": "2024-07-09T21:13:23.895541Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.898612Z", "completed_at": "2024-07-09T21:13:23.898615Z"}], "thread_id": "Thread-2", "execution_time": 0.01993393898010254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order_tmp", "compiled": true, "compiled_code": "select *\nfrom\n\"postgres\".\"zz_dbt_catherine_recharge_2\".\"orders_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.895789Z", "completed_at": "2024-07-09T21:13:23.896929Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.898959Z", "completed_at": "2024-07-09T21:13:23.898962Z"}], "thread_id": "Thread-8", "execution_time": 0.017213106155395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.885495Z", "completed_at": "2024-07-09T21:13:23.897138Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.900036Z", "completed_at": "2024-07-09T21:13:23.900039Z"}], "thread_id": "Thread-4", "execution_time": 0.020585060119628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"subscription_history_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.888539Z", "completed_at": "2024-07-09T21:13:23.898059Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.900886Z", "completed_at": "2024-07-09T21:13:23.900890Z"}], "thread_id": "Thread-3", "execution_time": 0.020930051803588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2\".\"subscription_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.905167Z", "completed_at": "2024-07-09T21:13:23.938477Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.946497Z", "completed_at": "2024-07-09T21:13:23.946504Z"}], "thread_id": "Thread-7", "execution_time": 0.04439496994018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_discount_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.938817Z", "completed_at": "2024-07-09T21:13:23.939997Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.946903Z", "completed_at": "2024-07-09T21:13:23.946907Z"}], "thread_id": "Thread-5", "execution_time": 0.044486045837402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.940442Z", "completed_at": "2024-07-09T21:13:23.941578Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.948538Z", "completed_at": "2024-07-09T21:13:23.948541Z"}], "thread_id": "Thread-6", "execution_time": 0.0456690788269043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_order_attribute_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.941794Z", "completed_at": "2024-07-09T21:13:23.942908Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.948870Z", "completed_at": "2024-07-09T21:13:23.948873Z"}], "thread_id": "Thread-2", "execution_time": 0.045761823654174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.943117Z", "completed_at": "2024-07-09T21:13:23.944250Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.949189Z", "completed_at": "2024-07-09T21:13:23.949192Z"}], "thread_id": "Thread-8", "execution_time": 0.04587435722351074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_tax_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.944454Z", "completed_at": "2024-07-09T21:13:23.946298Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.949508Z", "completed_at": "2024-07-09T21:13:23.949511Z"}], "thread_id": "Thread-4", "execution_time": 0.045970916748046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.checkout_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.947229Z", "completed_at": "2024-07-09T21:13:23.948343Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.950286Z", "completed_at": "2024-07-09T21:13:23.950290Z"}], "thread_id": "Thread-3", "execution_time": 0.046115875244140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.954173Z", "completed_at": "2024-07-09T21:13:23.955337Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.963115Z", "completed_at": "2024-07-09T21:13:23.963119Z"}], "thread_id": "Thread-7", "execution_time": 0.011696100234985352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.discount_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.955536Z", "completed_at": "2024-07-09T21:13:23.956639Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.963457Z", "completed_at": "2024-07-09T21:13:23.963461Z"}], "thread_id": "Thread-5", "execution_time": 0.011810064315795898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.one_time_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.957020Z", "completed_at": "2024-07-09T21:13:23.958128Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.965072Z", "completed_at": "2024-07-09T21:13:23.965075Z"}], "thread_id": "Thread-6", "execution_time": 0.0130157470703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.958319Z", "completed_at": "2024-07-09T21:13:23.959461Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.965388Z", "completed_at": "2024-07-09T21:13:23.965392Z"}], "thread_id": "Thread-2", "execution_time": 0.013115167617797852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.order_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.959699Z", "completed_at": "2024-07-09T21:13:23.961632Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.965706Z", "completed_at": "2024-07-09T21:13:23.965710Z"}], "thread_id": "Thread-8", "execution_time": 0.013232946395874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.orders_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.961830Z", "completed_at": "2024-07-09T21:13:23.962922Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.966013Z", "completed_at": "2024-07-09T21:13:23.966016Z"}], "thread_id": "Thread-4", "execution_time": 0.013343095779418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.subscription_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.963779Z", "completed_at": "2024-07-09T21:13:23.964880Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:23.966771Z", "completed_at": "2024-07-09T21:13:23.966774Z"}], "thread_id": "Thread-3", "execution_time": 0.0135498046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:24.001983Z", "completed_at": "2024-07-09T21:13:24.666461Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:24.667256Z", "completed_at": "2024-07-09T21:13:24.667261Z"}], "thread_id": "Thread-3", "execution_time": 0.7443299293518066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        price,\n        code,\n        title\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.812137Z", "completed_at": "2024-07-09T21:13:24.643692Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:24.644544Z", "completed_at": "2024-07-09T21:13:24.644561Z"}], "thread_id": "Thread-1", "execution_time": 0.9199860095977783, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.int_recharge__calendar_spine", "compiled": true, "compiled_code": "with spine as (\n    \n    \n    \n        \n            \n            \n            \n        \n\n    \n    \n\n    \n    \n    \n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 61\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2022-09-08'as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-11-08'as date)\n\n)\n\nselect * from filtered\n\n\n)\n\nselect *\nfrom spine", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"int_recharge__calendar_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.994356Z", "completed_at": "2024-07-09T21:13:24.666011Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:24.666861Z", "completed_at": "2024-07-09T21:13:24.666869Z"}], "thread_id": "Thread-8", "execution_time": 0.7590889930725098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_order_attribute", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_order_attribute_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_attribute\n    \n as \n    \n    order_attribute\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        order_attribute\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_order_attribute\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.997835Z", "completed_at": "2024-07-09T21:13:24.752778Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:24.753502Z", "completed_at": "2024-07-09T21:13:24.753509Z"}], "thread_id": "Thread-4", "execution_time": 0.8341360092163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_line_item", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_line_item_tmp\"\n),\n\nfields as (\n    \n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    tax_due\n    \n as \n    \n    tax_due\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    taxable_amount\n    \n as \n    \n    taxable_amount\n    \n, \n    \n    \n    unit_price_includes_tax\n    \n as \n    \n    unit_price_includes_tax\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    \n    \n    purchase_item_id\n    \n as \n    \n    purchase_item_id\n    \n, \n    \n    \n    purchase_item_type\n    \n as \n    \n    purchase_item_type\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        charge_id,\n        index,\n        vendor,\n        title,\n        variant_title,\n        sku,\n        grams,\n        quantity,\n        cast(total_price as float) as total_price,\n        unit_price,\n        tax_due,\n        taxable,\n        taxable_amount,\n        unit_price_includes_tax,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        purchase_item_id,\n        purchase_item_type\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.986883Z", "completed_at": "2024-07-09T21:13:24.777370Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:24.778019Z", "completed_at": "2024-07-09T21:13:24.778024Z"}], "thread_id": "Thread-6", "execution_time": 0.8591916561126709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_shipping_line_tmp\"\n),\n\nfields as (\n    \n    select\n        \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        address_id,\n        index,\n        price,\n        code,\n        title\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.976945Z", "completed_at": "2024-07-09T21:13:24.777763Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:24.778514Z", "completed_at": "2024-07-09T21:13:24.778518Z"}], "thread_id": "Thread-5", "execution_time": 0.8670811653137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n, \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as TEXT) as \n    \n    payment_method_id\n    \n \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as address_id,\n        customer_id,\n        first_name,\n        last_name,\n        cast(created_at as timestamp) as address_created_at,\n        cast(updated_at as timestamp) as address_updated_at,\n        address_1 as address_line_1,\n        address_2 as address_line_2,\n        city,\n        province,\n        zip,\n        country_code,\n        country,\n        company,\n        phone,\n        payment_method_id\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.990413Z", "completed_at": "2024-07-09T21:13:24.778266Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:24.778987Z", "completed_at": "2024-07-09T21:13:24.778992Z"}], "thread_id": "Thread-2", "execution_time": 0.8675332069396973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_discount", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_discount_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        id as discount_id, \n        code,\n        cast(value as float) as discount_value,\n        value_type\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_discount\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:23.970639Z", "completed_at": "2024-07-09T21:13:24.778733Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:24.779275Z", "completed_at": "2024-07-09T21:13:24.779282Z"}], "thread_id": "Thread-7", "execution_time": 0.8688008785247803, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_discounts", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_discounts_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_id,\n        address_id,\n        index\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_discounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:24.716633Z", "completed_at": "2024-07-09T21:13:25.269922Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.270671Z", "completed_at": "2024-07-09T21:13:25.270693Z"}], "thread_id": "Thread-3", "execution_time": 0.610023021697998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_tax_line", "compiled": true, "compiled_code": "\nwith base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        price,\n        rate,\n        title\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_tax_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:24.738316Z", "completed_at": "2024-07-09T21:13:25.358906Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.359532Z", "completed_at": "2024-07-09T21:13:25.359540Z"}], "thread_id": "Thread-1", "execution_time": 0.6849431991577148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_hash\n    \n as \n    \n    customer_hash\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    scheduled_at\n    \n as \n    \n    scheduled_at\n    \n, \n    \n    \n    orders_count\n    \n as \n    \n    orders_count\n    \n, \n    \n    \n    external_order_id_ecommerce\n    \n as \n    \n    external_order_id_ecommerce\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    tags\n    \n as \n    \n    tags\n    \n, \n    \n    \n    tax_lines\n    \n as \n    \n    tax_lines\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_weight_grams\n    \n as \n    \n    total_weight_grams\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    total_refunds\n    \n as \n    \n    total_refunds\n    \n, \n    \n    \n    external_transaction_id_payment_processor\n    \n as \n    \n    external_transaction_id_payment_processor\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    payment_processor\n    \n as \n    \n    payment_processor\n    \n, \n    cast(null as boolean) as \n    \n    has_uncommitted_changes\n    \n , \n    \n    \n    retry_date\n    \n as \n    \n    retry_date\n    \n, \n    \n    \n    error_type\n    \n as \n    \n    error_type\n    \n, \n    \n    \n    error\n    \n as \n    \n    error\n    \n, \n    \n    \n    charge_attempts\n    \n as \n    \n    charge_attempts\n    \n, \n    \n    \n    external_variant_id_not_found\n    \n as \n    \n    external_variant_id_not_found\n    \n, \n    \n    \n    client_details_browser_ip\n    \n as \n    \n    client_details_browser_ip\n    \n, \n    \n    \n    client_details_user_agent\n    \n as \n    \n    client_details_user_agent\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as charge_id,\n        customer_id,\n        customer_hash,\n        email,\n        cast(created_at as timestamp) as charge_created_at,\n        type as charge_type,\n        status as charge_status,\n        cast(updated_at as timestamp) as charge_updated_at,\n        note,\n        subtotal_price,\n        tax_lines,\n        total_discounts,\n        total_line_items_price,\n        total_tax,\n        cast(total_price as float) as total_price,\n        total_refunds,\n        total_weight_grams,\n        cast(scheduled_at as timestamp) as charge_scheduled_at,\n        cast(processed_at as timestamp) as charge_processed_at,\n        payment_processor,\n        external_transaction_id_payment_processor,\n        external_order_id_ecommerce,\n        orders_count,\n        has_uncommitted_changes,\n        cast(retry_date as timestamp) as retry_date,\n        error_type,\n        charge_attempts as times_retried,\n        address_id,\n        client_details_browser_ip,\n        client_details_user_agent,\n        tags,\n        error,\n        external_variant_id_not_found\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:24.746054Z", "completed_at": "2024-07-09T21:13:25.359226Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.359847Z", "completed_at": "2024-07-09T21:13:25.359852Z"}], "thread_id": "Thread-8", "execution_time": 0.6937839984893799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__checkout", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__checkout_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    token\n    \n as \n    \n    token\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    buyer_accepts_marketing\n    \n as \n    \n    buyer_accepts_marketing\n    \n, \n    \n    \n    completed_at\n    \n as \n    \n    completed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    discount_code\n    \n as \n    \n    discount_code\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    external_checkout_id\n    \n as \n    \n    external_checkout_id\n    \n, \n    \n    \n    external_checkout_source\n    \n as \n    \n    external_checkout_source\n    \n, \n    \n    \n    external_transaction_id_payment_processor\n    \n as \n    \n    external_transaction_id_payment_processor\n    \n, \n    \n    \n    order_attributes\n    \n as \n    \n    order_attributes\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    requires_shipping\n    \n as \n    \n    requires_shipping\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    taxes_included\n    \n as \n    \n    taxes_included\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        token as checkout_id,\n        charge_id,\n        buyer_accepts_marketing,\n        cast(completed_at as timestamp) as checkout_completed_at,\n        cast(created_at as timestamp) as checkout_created_at,\n        currency,\n        discount_code,\n        email,\n        external_checkout_id,\n        external_checkout_source,\n        external_transaction_id_payment_processor,\n        order_attributes,\n        phone,\n        requires_shipping,\n        subtotal_price,\n        taxes_included,\n        total_price,\n        total_tax,\n        cast(updated_at as timestamp) as checkout_updated_at\n\n    \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__checkout\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.433103Z", "completed_at": "2024-07-09T21:13:25.438015Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.438307Z", "completed_at": "2024-07-09T21:13:25.438313Z"}], "thread_id": "Thread-8", "execution_time": 0.006066083908081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_shipping_line_charge_id__index.4b9ff30e99", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_shipping_line\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.439632Z", "completed_at": "2024-07-09T21:13:25.485474Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.485700Z", "completed_at": "2024-07-09T21:13:25.485706Z"}], "thread_id": "Thread-8", "execution_time": 0.04668998718261719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_shipping_line_charge_id.2e2da51e26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_shipping_line\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.486744Z", "completed_at": "2024-07-09T21:13:25.489718Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.489933Z", "completed_at": "2024-07-09T21:13:25.489937Z"}], "thread_id": "Thread-8", "execution_time": 0.003662109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_order_attribute_charge_id__index.e3dda1974f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_order_attribute\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.491058Z", "completed_at": "2024-07-09T21:13:25.494309Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.494540Z", "completed_at": "2024-07-09T21:13:25.494544Z"}], "thread_id": "Thread-8", "execution_time": 0.0040700435638427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_order_attribute_charge_id.8419846588", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_order_attribute\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:24.804705Z", "completed_at": "2024-07-09T21:13:25.419261Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.419607Z", "completed_at": "2024-07-09T21:13:25.419614Z"}], "thread_id": "Thread-4", "execution_time": 0.7078869342803955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__discount", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__discount_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    usage_limits\n    \n as \n    \n    usage_limits\n    \n, \n    \n    \n    applies_to\n    \n as \n    \n    applies_to\n    \n, \n    \n    \n    applies_to_resource\n    \n as \n    \n    applies_to_resource\n    \n, \n    \n    \n    applies_to_id\n    \n as \n    \n    applies_to_id\n    \n, \n    \n    \n    applies_to_product_type\n    \n as \n    \n    applies_to_product_type\n    \n, \n    \n    \n    minimum_order_amount\n    \n as \n    \n    minimum_order_amount\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_id,\n        cast(created_at as timestamp) as discount_created_at,\n        cast(updated_at as timestamp) as discount_updated_at,\n        cast(starts_at as timestamp) as discount_starts_at,\n        cast(ends_at as timestamp) as discount_ends_at,\n        code,\n        value,\n        status,\n        usage_limits,\n        applies_to,\n        applies_to_resource,\n        applies_to_id,\n        applies_to_product_type,\n        minimum_order_amount\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__discount\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.495597Z", "completed_at": "2024-07-09T21:13:25.512696Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.517117Z", "completed_at": "2024-07-09T21:13:25.517121Z"}], "thread_id": "Thread-8", "execution_time": 0.022037029266357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_line_item_charge_id__index.cba28984fe", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_line_item\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.519195Z", "completed_at": "2024-07-09T21:13:25.525284Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.525539Z", "completed_at": "2024-07-09T21:13:25.525545Z"}], "thread_id": "Thread-4", "execution_time": 0.007930278778076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_line_item_charge_id.555f3f4938", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_line_item\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.522457Z", "completed_at": "2024-07-09T21:13:25.526282Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.526771Z", "completed_at": "2024-07-09T21:13:25.526775Z"}], "thread_id": "Thread-8", "execution_time": 0.007864952087402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__address_shipping_line_address_id__index.ec269cbd74", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, index\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_shipping_line\"\n    group by address_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.527658Z", "completed_at": "2024-07-09T21:13:25.534376Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.534701Z", "completed_at": "2024-07-09T21:13:25.534707Z"}], "thread_id": "Thread-4", "execution_time": 0.008270978927612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__address_shipping_line_address_id.f5fb6034fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_shipping_line\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.530931Z", "completed_at": "2024-07-09T21:13:25.535422Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.536055Z", "completed_at": "2024-07-09T21:13:25.536061Z"}], "thread_id": "Thread-8", "execution_time": 0.0056841373443603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__address_address_id.ffe947d70f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.536978Z", "completed_at": "2024-07-09T21:13:25.545443Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.545826Z", "completed_at": "2024-07-09T21:13:25.545834Z"}], "thread_id": "Thread-4", "execution_time": 0.010216951370239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__address_address_id.3ea4d98333", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    address_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address\"\nwhere address_id is not null\ngroup by address_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.542269Z", "completed_at": "2024-07-09T21:13:25.547030Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.547499Z", "completed_at": "2024-07-09T21:13:25.547505Z"}], "thread_id": "Thread-8", "execution_time": 0.0060651302337646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_discount_charge_id__index.87080ff978", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_discount\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.547924Z", "completed_at": "2024-07-09T21:13:25.557410Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.557773Z", "completed_at": "2024-07-09T21:13:25.557781Z"}], "thread_id": "Thread-4", "execution_time": 0.011152267456054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_discount_charge_id.2efab5c017", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_discount\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.552993Z", "completed_at": "2024-07-09T21:13:25.558718Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.559323Z", "completed_at": "2024-07-09T21:13:25.559328Z"}], "thread_id": "Thread-8", "execution_time": 0.007142066955566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__address_discounts_address_id__index.636bfd7451", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, index\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_discounts\"\n    group by address_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:24.845746Z", "completed_at": "2024-07-09T21:13:25.512895Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.517475Z", "completed_at": "2024-07-09T21:13:25.517479Z"}], "thread_id": "Thread-2", "execution_time": 0.7209877967834473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order_line_item", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order_line_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    tax_due\n    \n as \n    \n    tax_due\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    taxable_amount\n    \n as \n    \n    taxable_amount\n    \n, \n    \n    \n    unit_price_includes_tax\n    \n as \n    \n    unit_price_includes_tax\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    purchase_item_id\n    \n as \n    \n    purchase_item_id\n    \n, \n    \n    \n    purchase_item_type\n    \n as \n    \n    purchase_item_type\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        order_id,\n        index,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        title as order_line_item_title,\n        variant_title as product_variant_title,\n        sku,\n        quantity,\n        grams,\n        cast(total_price as float) as total_price,\n        unit_price,\n        tax_due,\n        taxable,\n        taxable_amount,\n        unit_price_includes_tax,\n        purchase_item_id,\n        purchase_item_type\n\n        \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:24.850069Z", "completed_at": "2024-07-09T21:13:25.512510Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.516679Z", "completed_at": "2024-07-09T21:13:25.516684Z"}], "thread_id": "Thread-7", "execution_time": 0.7273948192596436, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    charge_status\n    \n as \n    \n    charge_status\n    \n, \n    \n    \n    is_prepaid\n    \n as \n    \n    is_prepaid\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    external_order_id_ecommerce\n    \n as \n    \n    external_order_id_ecommerce\n    \n, \n    \n    \n    external_order_number_ecommerce\n    \n as \n    \n    external_order_number_ecommerce\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    scheduled_at\n    \n as \n    \n    scheduled_at\n    \n, \n    \n    \n    shipped_date\n    \n as \n    \n    shipped_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as order_id,\n        external_order_id_ecommerce,\n        external_order_number_ecommerce,\n        customer_id,\n        email,\n        cast(created_at as timestamp) as order_created_at,\n        status as order_status,\n        cast(updated_at as timestamp) as order_updated_at,\n        charge_id,\n        transaction_id,\n        charge_status,\n        is_prepaid,\n        cast(total_price as float) as order_total_price,\n        type as order_type,\n        cast(processed_at as timestamp) as order_processed_at,\n        cast(scheduled_at as timestamp) as order_scheduled_at,\n        cast(shipped_date as timestamp) as order_shipped_date,\n        address_id,\n        is_deleted\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:24.829097Z", "completed_at": "2024-07-09T21:13:25.516924Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.518005Z", "completed_at": "2024-07-09T21:13:25.518010Z"}], "thread_id": "Thread-6", "execution_time": 0.7383620738983154, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__customer", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__customer_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    external_customer_id_ecommerce\n    \n as \n    \n    external_customer_id_ecommerce\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    first_charge_processed_at\n    \n as \n    \n    first_charge_processed_at\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    subscriptions_active_count\n    \n as \n    \n    subscriptions_active_count\n    \n, \n    \n    \n    subscriptions_total_count\n    \n as \n    \n    subscriptions_total_count\n    \n, \n    \n    \n    has_valid_payment_method\n    \n as \n    \n    has_valid_payment_method\n    \n, \n    \n    \n    has_payment_method_in_dunning\n    \n as \n    \n    has_payment_method_in_dunning\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as TEXT) as \n    \n    billing_first_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_company\n    \n , \n    cast(null as TEXT) as \n    \n    billing_city\n    \n , \n    cast(null as TEXT) as \n    \n    billing_country\n    \n , \n    \n    \n    hash\n    \n as customer_hash \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as customer_id,\n        customer_hash,\n        external_customer_id_ecommerce,\n        email,\n        first_name,\n        last_name,\n        cast(created_at as timestamp) as customer_created_at,\n        cast(updated_at as timestamp) as customer_updated_at,\n        cast(first_charge_processed_at as timestamp) as first_charge_processed_at,\n        subscriptions_active_count,\n        subscriptions_total_count,\n        has_valid_payment_method,\n        has_payment_method_in_dunning,\n        tax_exempt,\n        billing_first_name,\n        billing_last_name,\n        billing_company,\n        billing_city,\n        billing_country\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.560896Z", "completed_at": "2024-07-09T21:13:25.570509Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.574123Z", "completed_at": "2024-07-09T21:13:25.574129Z"}], "thread_id": "Thread-4", "execution_time": 0.015174150466918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__address_discounts_address_id.7225544f1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address_discounts\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:24.839370Z", "completed_at": "2024-07-09T21:13:25.518754Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.521950Z", "completed_at": "2024-07-09T21:13:25.521955Z"}], "thread_id": "Thread-5", "execution_time": 0.7385179996490479, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__one_time_product", "compiled": true, "compiled_code": "\nwith base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__one_time_product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    next_charge_scheduled_at\n    \n as \n    \n    next_charge_scheduled_at\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as one_time_product_id,\n        address_id,\n        customer_id,\n        is_deleted,\n        cast(created_at as timestamp) as one_time_created_at,\n        cast(updated_at as timestamp) as one_time_updated_at,\n        next_charge_scheduled_at as one_time_next_charge_scheduled_at,\n        product_title,\n        variant_title,\n        price,\n        quantity,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        sku\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__one_time_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.567357Z", "completed_at": "2024-07-09T21:13:25.575097Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.582644Z", "completed_at": "2024-07-09T21:13:25.582655Z"}], "thread_id": "Thread-8", "execution_time": 0.017148256301879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_tax_line_charge_id__index.9fc228fecf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_tax_line\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.571048Z", "completed_at": "2024-07-09T21:13:25.576437Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.586404Z", "completed_at": "2024-07-09T21:13:25.586410Z"}], "thread_id": "Thread-2", "execution_time": 0.020632028579711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_tax_line_charge_id.f25f6cb759", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_tax_line\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.576641Z", "completed_at": "2024-07-09T21:13:25.587760Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.592884Z", "completed_at": "2024-07-09T21:13:25.592890Z"}], "thread_id": "Thread-7", "execution_time": 0.019080162048339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__charge_line_item_history", "compiled": true, "compiled_code": "with charges as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge\"\n\n), charge_line_items as (\n    select \n        charge_id,\n        index,\n        cast(total_price as float) as amount,\n        title,\n        'charge line' as line_item_type\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_line_item\"\n\n), charge_discounts as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_discount\"\n\n), discounts_enriched as (\n    select\n        charge_discounts.charge_id,\n        charge_discounts.index,\n        cast(case when lower(charge_discounts.value_type) = 'percentage'\n            then round(cast(charge_discounts.discount_value / 100 * charges.total_line_items_price as numeric(28,6)), 2)\n            else charge_discounts.discount_value \n            end as float) as amount,\n        charge_discounts.code as title,\n        'discount' as line_item_type\n    from charge_discounts\n    left join charges\n        on charges.charge_id = charge_discounts.charge_id\n\n), charge_shipping_lines as (\n    select \n        charge_id,\n        index,\n        cast(price as float) as amount,\n        title,\n        'shipping' as line_item_type\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_shipping_line\"\n\n), charge_tax_lines as (\n    \n        select \n            charge_id,\n            index,\n            cast(price as float) as amount,\n            title,\n            'tax' as line_item_type\n        from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_tax_line\" -- use this if possible since it is individual tax items\n    \n\n), refunds as (\n    select\n        charge_id,\n        0 as index,\n        cast(total_refunds as float) as amount,\n        'total refunds' as title,\n        'refund' as line_item_type\n    from charges -- have to extract refunds from charges table since a refund line item table is not available\n    where total_refunds > 0\n\n), unioned as (\n\n    select *\n    from charge_line_items\n\n    union all\n    select *\n    from discounts_enriched\n\n    union all\n    select *\n    from charge_shipping_lines\n\n    union all\n    select *\n    from charge_tax_lines\n    \n    union all\n    select *\n    from refunds\n\n), joined as (\n    select\n        unioned.charge_id,\n        row_number() over(partition by unioned.charge_id \n            order by unioned.line_item_type, unioned.index) \n            as charge_row_num,\n        unioned.index as source_index,\n        charges.charge_created_at,\n        charges.customer_id,\n        charges.address_id,\n        unioned.amount,\n        unioned.title,\n        unioned.line_item_type\n    from unioned\n    left join charges\n        on charges.charge_id = unioned.charge_id\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__charge_line_item_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.583719Z", "completed_at": "2024-07-09T21:13:25.588723Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.593730Z", "completed_at": "2024-07-09T21:13:25.593734Z"}], "thread_id": "Thread-6", "execution_time": 0.019296884536743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_charge_id.e40d1f4998", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.588939Z", "completed_at": "2024-07-09T21:13:25.600720Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.604495Z", "completed_at": "2024-07-09T21:13:25.604501Z"}], "thread_id": "Thread-4", "execution_time": 0.021400928497314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__charge_charge_id.a013ccef10", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge\"\nwhere charge_id is not null\ngroup by charge_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.594142Z", "completed_at": "2024-07-09T21:13:25.604069Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.605332Z", "completed_at": "2024-07-09T21:13:25.605335Z"}], "thread_id": "Thread-5", "execution_time": 0.01804518699645996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__checkout_checkout_id.fb781847d8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect checkout_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__checkout\"\nwhere checkout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.597568Z", "completed_at": "2024-07-09T21:13:25.604923Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.608950Z", "completed_at": "2024-07-09T21:13:25.608954Z"}], "thread_id": "Thread-8", "execution_time": 0.020572185516357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__checkout_checkout_id.8ab72bed8a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    checkout_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__checkout\"\nwhere checkout_id is not null\ngroup by checkout_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.600962Z", "completed_at": "2024-07-09T21:13:25.608751Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.613685Z", "completed_at": "2024-07-09T21:13:25.613691Z"}], "thread_id": "Thread-2", "execution_time": 0.020466089248657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__discount_discount_id.71ea1251b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__discount\"\nwhere discount_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.605677Z", "completed_at": "2024-07-09T21:13:25.614370Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.615730Z", "completed_at": "2024-07-09T21:13:25.615734Z"}], "thread_id": "Thread-7", "execution_time": 0.01531219482421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__discount_discount_id.5e928f569c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    discount_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__discount\"\nwhere discount_id is not null\ngroup by discount_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.609321Z", "completed_at": "2024-07-09T21:13:25.615266Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.619399Z", "completed_at": "2024-07-09T21:13:25.619404Z"}], "thread_id": "Thread-6", "execution_time": 0.015646934509277344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__order_line_item_order_id__index.e56621b39a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order_line_item\"\n    group by order_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.616273Z", "completed_at": "2024-07-09T21:13:25.630169Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.633892Z", "completed_at": "2024-07-09T21:13:25.633898Z"}], "thread_id": "Thread-4", "execution_time": 0.02151012420654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__order_line_item_order_id.bf548aca5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order_line_item\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.620234Z", "completed_at": "2024-07-09T21:13:25.633656Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.638459Z", "completed_at": "2024-07-09T21:13:25.638465Z"}], "thread_id": "Thread-5", "execution_time": 0.023958206176757812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__billing_history", "compiled": true, "compiled_code": "with orders as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order\"\n\n), order_line_items as (\n    select \n        order_id,\n        sum(quantity) as order_item_quantity,\n        round(cast(sum(total_price) as numeric(28,6)), 2) as order_line_item_total\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order_line_item\"\n    group by 1\n\n\n), charges as ( --each charge can have multiple orders associated with it\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge\"\n\n), charge_shipping_lines as (\n    select \n        charge_id,\n        round(cast(sum(price) as numeric(28,6)), 2) as total_shipping\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_shipping_line\"\n    group by 1\n\n), charges_enriched as (\n    select\n        charges.*,\n        charge_shipping_lines.total_shipping\n    from charges\n    left join charge_shipping_lines\n        on charge_shipping_lines.charge_id = charges.charge_id\n\n), joined as (\n    select \n        orders.*,\n        -- recognized_total (calculated total based on prepaid subscriptions)\n        charges_enriched.charge_created_at,\n        charges_enriched.payment_processor,\n        charges_enriched.tags,\n        charges_enriched.orders_count,\n        charges_enriched.charge_type,\n        \n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_price, 0)\n                end as charge_total_price,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_price ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_price,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.subtotal_price, 0)\n                end as charge_subtotal_price,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.subtotal_price ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_subtotal_price,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.tax_lines, 0)\n                end as charge_tax_lines,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.tax_lines ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_tax_lines,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_discounts, 0)\n                end as charge_total_discounts,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_discounts ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_discounts,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_refunds, 0)\n                end as charge_total_refunds,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_refunds ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_refunds,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_tax, 0)\n                end as charge_total_tax,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_tax ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_tax,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_weight_grams, 0)\n                end as charge_total_weight_grams,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_weight_grams ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_weight_grams,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_shipping, 0)\n                end as charge_total_shipping,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_shipping ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_shipping,\n        \n        coalesce(order_line_items.order_item_quantity, 0) as order_item_quantity,\n        coalesce(order_line_items.order_line_item_total, 0) as order_line_item_total\n    from orders\n    left join order_line_items\n        on order_line_items.order_id = orders.order_id\n    left join charges_enriched -- still want to capture charges that don't have an order yet\n        on charges_enriched.charge_id = orders.charge_id\n\n), joined_enriched as (\n    select \n        joined.*,\n        -- total_price includes taxes and discounts, so only need to subtract total_refunds to get net.\n        charge_total_price - charge_total_refunds as total_net_charge_value,\n        calculated_order_total_price - calculated_order_total_refunds as total_calculated_net_order_value  \n    from joined\n)\n\nselect * \nfrom joined_enriched", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__billing_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.627201Z", "completed_at": "2024-07-09T21:13:25.635505Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.642013Z", "completed_at": "2024-07-09T21:13:25.642018Z"}], "thread_id": "Thread-8", "execution_time": 0.026583194732666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__order_order_id.70fc03aaa7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.630464Z", "completed_at": "2024-07-09T21:13:25.638872Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.642703Z", "completed_at": "2024-07-09T21:13:25.642707Z"}], "thread_id": "Thread-2", "execution_time": 0.023639917373657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__order_order_id.bab2588ddd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__order\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.635708Z", "completed_at": "2024-07-09T21:13:25.643981Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.645266Z", "completed_at": "2024-07-09T21:13:25.645269Z"}], "thread_id": "Thread-7", "execution_time": 0.015455961227416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__customer_customer_id.0f267f14ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.639372Z", "completed_at": "2024-07-09T21:13:25.644193Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.645597Z", "completed_at": "2024-07-09T21:13:25.645600Z"}], "thread_id": "Thread-6", "execution_time": 0.012510061264038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__customer_customer_id.1dcf3f6410", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__customer\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.646141Z", "completed_at": "2024-07-09T21:13:25.655442Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.660468Z", "completed_at": "2024-07-09T21:13:25.660475Z"}], "thread_id": "Thread-4", "execution_time": 0.017374038696289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__one_time_product_one_time_product_id.03a2a12d7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect one_time_product_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__one_time_product\"\nwhere one_time_product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.649109Z", "completed_at": "2024-07-09T21:13:25.659982Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.661185Z", "completed_at": "2024-07-09T21:13:25.661189Z"}], "thread_id": "Thread-5", "execution_time": 0.017509937286376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__one_time_product_one_time_product_id.8ccb87ed5b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    one_time_product_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__one_time_product\"\nwhere one_time_product_id is not null\ngroup by one_time_product_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.652434Z", "completed_at": "2024-07-09T21:13:25.661551Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.667503Z", "completed_at": "2024-07-09T21:13:25.667508Z"}], "thread_id": "Thread-8", "execution_time": 0.02272796630859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__charge_line_item_history_charge_id__charge_row_num.1863e6df2f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, charge_row_num\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__charge_line_item_history\"\n    group by charge_id, charge_row_num\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.655999Z", "completed_at": "2024-07-09T21:13:25.667218Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.668001Z", "completed_at": "2024-07-09T21:13:25.668006Z"}], "thread_id": "Thread-2", "execution_time": 0.02213883399963379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__charge_line_item_history_charge_id.48a34a867c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__charge_line_item_history\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.661772Z", "completed_at": "2024-07-09T21:13:25.668531Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.668935Z", "completed_at": "2024-07-09T21:13:25.668939Z"}], "thread_id": "Thread-7", "execution_time": 0.013839244842529297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__billing_history_order_id.d9c88b8dff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__billing_history\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.664448Z", "completed_at": "2024-07-09T21:13:25.668744Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.669285Z", "completed_at": "2024-07-09T21:13:25.669288Z"}], "thread_id": "Thread-6", "execution_time": 0.013642072677612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.unique_recharge__billing_history_order_id.05decc3c47", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__billing_history\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.327627Z", "completed_at": "2024-07-09T21:13:25.958430Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:25.958856Z", "completed_at": "2024-07-09T21:13:25.958869Z"}], "thread_id": "Thread-3", "execution_time": 0.7109220027923584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    cast(null as integer) as \n    \n    id\n    \n , \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    next_charge_scheduled_at\n    \n as \n    \n    next_charge_scheduled_at\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    cancellation_reason_comments\n    \n as \n    \n    cancellation_reason_comments\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    order_interval_unit\n    \n as \n    \n    order_interval_unit\n    \n, \n    \n    \n    order_interval_frequency\n    \n as \n    \n    order_interval_frequency\n    \n, \n    \n    \n    charge_interval_frequency\n    \n as \n    \n    charge_interval_frequency\n    \n, \n    \n    \n    order_day_of_week\n    \n as \n    \n    order_day_of_week\n    \n, \n    \n    \n    order_day_of_month\n    \n as \n    \n    order_day_of_month\n    \n, \n    \n    \n    expire_after_specific_number_of_charges\n    \n as \n    \n    expire_after_specific_number_of_charges\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        coalesce(id, subscription_id) as subscription_id,\n        customer_id,\n        address_id,\n        cast(created_at as timestamp) as subscription_created_at,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        product_title,\n        variant_title,\n        sku,\n        cast(price as float) as price,\n        quantity,\n        status as subscription_status,\n        charge_interval_frequency,\n        order_interval_unit,\n        order_interval_frequency,\n        order_day_of_month,\n        order_day_of_week,\n        expire_after_specific_number_of_charges,\n        cast(updated_at as timestamp) as subscription_updated_at,\n        cast(next_charge_scheduled_at as timestamp) as subscription_next_charge_scheduled_at,\n        cast(cancelled_at as timestamp) as subscription_cancelled_at,\n        cancellation_reason,\n        cancellation_reason_comments,\n        _fivetran_synced,\n        row_number() over (partition by subscription_id order by updated_at desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.072426Z", "completed_at": "2024-07-09T21:13:26.084671Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.084954Z", "completed_at": "2024-07-09T21:13:26.084962Z"}], "thread_id": "Thread-5", "execution_time": 0.04363203048706055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__subscription_overview", "compiled": true, "compiled_code": "with subscriptions as (\n\n    select * \n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription_history\"\n    where is_most_recent_record\n\n), charges as (\n    select * \n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge\"\n    where lower(charge_type) = 'recurring'\n\n), charge_line_items as (\n    select * \n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_line_item\"\n\n), customers_charge_lines as (\n    select \n        charge_line_items.charge_id,\n        charge_line_items.purchase_item_id,\n        charge_line_items.external_product_id_ecommerce,\n        charge_line_items.external_variant_id_ecommerce,\n        charges.customer_id,\n        charges.address_id,\n        charges.charge_created_at,\n        charges.charge_status\n    from charge_line_items\n    left join charges\n        on charges.charge_id = charge_line_items.charge_id\n\n), subscriptions_charges as (\n    select \n        subscriptions.subscription_id,\n        count(case when lower(customers_charge_lines.charge_status) = 'success' \n            then 1 else null\n            end) as count_successful_charges,\n        count(case when lower(customers_charge_lines.charge_status) = 'queued' \n            then 1 else null\n            end) as count_queued_charges\n    from subscriptions\n    left join customers_charge_lines\n        on customers_charge_lines.purchase_item_id = subscriptions.subscription_id\n    group by 1\n\n), subscriptions_enriched as (\n    select\n        subscriptions.*,\n        subscriptions_charges.count_successful_charges,\n        subscriptions_charges.count_queued_charges,\n        case when subscription_next_charge_scheduled_at is null then null\n            when expire_after_specific_number_of_charges - count_successful_charges < 0 then null\n            else expire_after_specific_number_of_charges - count_successful_charges\n            end as charges_until_expiration,\n        case when lower(order_interval_unit) = 'month' then charge_interval_frequency * 30\n            when lower(order_interval_unit) = 'week' then charge_interval_frequency * 7\n            else charge_interval_frequency \n            end as charge_interval_frequency_days\n    from subscriptions\n    left join subscriptions_charges\n        on subscriptions_charges.subscription_id = subscriptions.subscription_id\n)\n\nselect * \nfrom subscriptions_enriched", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__subscription_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.080291Z", "completed_at": "2024-07-09T21:13:26.085580Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.086083Z", "completed_at": "2024-07-09T21:13:26.086088Z"}], "thread_id": "Thread-2", "execution_time": 0.04268002510070801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__subscription_history_subscription_id.678aed985c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription_history\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.044563Z", "completed_at": "2024-07-09T21:13:26.085829Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.087284Z", "completed_at": "2024-07-09T21:13:26.087288Z"}], "thread_id": "Thread-4", "execution_time": 0.04752302169799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__line_item_enhanced", "compiled": true, "compiled_code": "with charge_line_items as (\n\n    select * \n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_line_item\"\n\n), charges as (\n\n    select * \n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge\"\n\n), charge_shipping_lines as (\n\n    select\n        charge_id,\n        sum(price) as total_shipping\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__charge_shipping_line\"\n    group by 1\n\n\n), checkouts as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__checkout\"\n\n\n\n), addresses as (\n\n    select * \n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__address\"\n\n), customers as (\n\n    select * \n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__customer\"\n\n), subscriptions as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription_history\" \n    where is_most_recent_record\n\n), enhanced as (\n    select\n        cast(charge_line_items.charge_id as TEXT) as header_id,\n        cast(charge_line_items.index as TEXT) as line_item_id,\n        row_number() over (partition by charge_line_items.charge_id\n            order by charge_line_items.index) as line_item_index,\n\n        -- header level fields\n        charges.charge_created_at as created_at,\n        charges.charge_status as header_status,\n        cast(charges.total_discounts as numeric(28,6)) as discount_amount,\n        cast(charges.total_refunds as numeric(28,6)) as refund_amount,\n        cast(charge_shipping_lines.total_shipping as numeric(28,6)) as fee_amount,\n        addresses.payment_method_id,\n        charges.external_transaction_id_payment_processor as payment_id,\n        charges.payment_processor as payment_method,\n        charges.charge_processed_at as payment_at,\n        charges.charge_type as billing_type,  -- possible values: checkout, recurring\n\n        -- Currency is in the Charges api object but not the Fivetran schema, so relying on Checkouts for now.\n        -- Checkouts has only 20% utilization, so we should switch to the Charges field when it is added.\n        cast(null as TEXT) as currency,\n\n        -- line item level fields\n        cast(charge_line_items.purchase_item_type as TEXT) as transaction_type, -- possible values: subscription, onetime\n        cast(charge_line_items.external_product_id_ecommerce as TEXT) as product_id,\n        cast(charge_line_items.title as TEXT) as product_name,\n        cast(null as TEXT) as product_type, -- product_type not available\n        cast(charge_line_items.quantity as integer) as quantity,\n        cast(charge_line_items.unit_price as numeric(28,6)) as unit_amount,\n        cast(charge_line_items.tax_due as numeric(28,6)) as tax_amount,\n        cast(charge_line_items.total_price as numeric(28,6)) as total_amount,\n        case when charge_line_items.purchase_item_type = 'subscription'\n            then cast(charge_line_items.purchase_item_id as TEXT)\n            end as subscription_id,\n        subscriptions.subscription_created_at as subscription_period_started_at,\n        subscriptions.subscription_cancelled_at as subscription_period_ended_at,\n        cast(subscriptions.subscription_status as TEXT) as subscription_status,\n        'customer' as customer_level,\n        cast(charges.customer_id as TEXT) as customer_id,\n        -- coalesces are since information may be incomplete in various tables and casts for consistency\n        coalesce(\n            cast(charges.email as TEXT),\n            cast(customers.email as TEXT)\n            ) as customer_email,\n        coalesce(\n            customers.billing_first_name || ' ' || customers.billing_last_name,\n            addresses.first_name || ' ' || addresses.last_name\n            ) as customer_name,\n        coalesce(cast(customers.billing_company as TEXT),\n            cast(addresses.company as TEXT)\n            ) as customer_company,\n        coalesce(cast(customers.billing_city as TEXT),\n            cast(addresses.city as TEXT)\n            ) as customer_city,\n        coalesce(cast(customers.billing_country as TEXT),\n            cast(addresses.country as TEXT)\n            ) as customer_country\n\n    from charge_line_items\n\n    left join charges\n        on charges.charge_id = charge_line_items.charge_id\n\n    left join addresses\n        on addresses.address_id = charges.address_id\n\n    left join customers\n        on customers.customer_id = charges.customer_id\n\n    \n    left join checkouts\n        on checkouts.charge_id = charges.charge_id\n    \n\n    left join charge_shipping_lines\n        on charge_shipping_lines.charge_id = charges.charge_id\n\n    left join subscriptions\n        on subscriptions.subscription_id = charge_line_items.purchase_item_id\n\n), final as (\n\n    -- line item level\n    select \n        header_id,\n        line_item_id,\n        line_item_index,\n        'line_item' as record_type,\n        created_at,\n        header_status,\n        billing_type,\n        currency,\n        product_id,\n        product_name,\n        product_type,\n        transaction_type,\n        quantity,\n        unit_amount,\n        cast(null as numeric(28,6)) as discount_amount,\n        cast(null as numeric(28,6)) as refund_amount,\n        cast(null as numeric(28,6)) as fee_amount,\n        tax_amount,\n        total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        subscription_id,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n\n    union all\n\n    -- header level\n    select\n        header_id,\n        cast(null as TEXT) as line_item_id,\n        cast(0 as integer) as line_item_index,\n        'header' as record_type,\n        created_at,\n        header_status,\n        billing_type,\n        currency,\n        cast(null as TEXT) as product_id,\n        cast(null as TEXT) as product_name,\n        cast(null as TEXT) as product_type,\n        cast(null as TEXT) as transaction_type,\n        cast(null as integer) as quantity,\n        cast(null as numeric(28,6)) as unit_amount,\n        discount_amount,\n        refund_amount,\n        fee_amount,\n        cast(null as numeric(28,6)) as tax_amount,\n        cast(null as numeric(28,6)) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        cast(null as TEXT) as subscription_id,\n        cast(null as timestamp) as subscription_period_started_at,\n        cast(null as timestamp) as subscription_period_ended_at,\n        cast(null as TEXT) as subscription_status,\n        customer_id,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n    where line_item_index = 1\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__line_item_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.076820Z", "completed_at": "2024-07-09T21:13:26.086488Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.087738Z", "completed_at": "2024-07-09T21:13:26.087742Z"}], "thread_id": "Thread-8", "execution_time": 0.045313119888305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__subscription_history_subscription_id__subscription_updated_at.7eefd56269", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, subscription_updated_at\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription_history\"\n    group by subscription_id, subscription_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.089790Z", "completed_at": "2024-07-09T21:13:26.099829Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.100072Z", "completed_at": "2024-07-09T21:13:26.100078Z"}], "thread_id": "Thread-6", "execution_time": 0.01200103759765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__subscription_overview_subscription_id.edad857cc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__subscription_overview\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.093678Z", "completed_at": "2024-07-09T21:13:26.100553Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.100974Z", "completed_at": "2024-07-09T21:13:26.100978Z"}], "thread_id": "Thread-3", "execution_time": 0.012623310089111328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.unique_recharge__subscription_overview_subscription_id.ead71825cd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__subscription_overview\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.096864Z", "completed_at": "2024-07-09T21:13:26.100766Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.101341Z", "completed_at": "2024-07-09T21:13:26.101344Z"}], "thread_id": "Thread-5", "execution_time": 0.011857986450195312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__line_item_enhanced_header_id__line_item_index.8e3f9f7be6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        header_id, line_item_index\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__line_item_enhanced\"\n    group by header_id, line_item_index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:25.423680Z", "completed_at": "2024-07-09T21:13:26.108681Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.108906Z", "completed_at": "2024-07-09T21:13:26.108910Z"}], "thread_id": "Thread-1", "execution_time": 0.7918682098388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    next_charge_scheduled_at\n    \n as \n    \n    next_charge_scheduled_at\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    cancellation_reason_comments\n    \n as \n    \n    cancellation_reason_comments\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    order_interval_unit\n    \n as \n    \n    order_interval_unit\n    \n, \n    \n    \n    order_interval_frequency\n    \n as \n    \n    order_interval_frequency\n    \n, \n    \n    \n    charge_interval_frequency\n    \n as \n    \n    charge_interval_frequency\n    \n, \n    \n    \n    order_day_of_week\n    \n as \n    \n    order_day_of_week\n    \n, \n    \n    \n    order_day_of_month\n    \n as \n    \n    order_day_of_month\n    \n, \n    \n    \n    expire_after_specific_number_of_charges\n    \n as \n    \n    expire_after_specific_number_of_charges\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as subscription_id,\n        customer_id,\n        address_id,\n        cast(created_at as timestamp) as subscription_created_at,\n        product_title,\n        variant_title,\n        sku,\n        cast(price as float) as price,\n        quantity,\n        status as subscription_status,\n        next_charge_scheduled_at as subscription_next_charge_scheduled_at,\n        charge_interval_frequency,\n        expire_after_specific_number_of_charges,\n        order_interval_frequency,\n        order_interval_unit,\n        order_day_of_week,\n        order_day_of_month,\n        cast(updated_at as timestamp) as subscription_updated_at,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        cast(cancelled_at as timestamp) as subscription_cancelled_at,\n        cancellation_reason,\n        cancellation_reason_comments\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.220688Z", "completed_at": "2024-07-09T21:13:26.230979Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.231239Z", "completed_at": "2024-07-09T21:13:26.231250Z"}], "thread_id": "Thread-4", "execution_time": 0.014929771423339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__subscription_subscription_id.bed39b80ea", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.217387Z", "completed_at": "2024-07-09T21:13:26.231689Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.231884Z", "completed_at": "2024-07-09T21:13:26.231888Z"}], "thread_id": "Thread-2", "execution_time": 0.01604318618774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__subscription_subscription_id.c2f0892c32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.233416Z", "completed_at": "2024-07-09T21:13:26.254178Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.254512Z", "completed_at": "2024-07-09T21:13:26.254519Z"}], "thread_id": "Thread-6", "execution_time": 0.02161407470703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__customer_details", "compiled": true, "compiled_code": "with  __dbt__cte__int_recharge__customer_details as (\nwith customers as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__customer\"\n\n), billing as (\n    select * \n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__billing_history\"\n\n-- Agg'd on customer_id\n), order_aggs as ( \n    select \n        customer_id,\n        count(order_id) as total_orders,\n        round(cast(sum(order_total_price) as numeric(28,6)), 2) as total_amount_ordered,\n        round(cast(avg(order_total_price) as numeric(28,6)), 2) as avg_order_amount,\n        round(cast(sum(order_item_quantity) as numeric(28,6)), 2) as total_quantity_ordered,\n        round(cast(avg(order_item_quantity) as numeric(28,6)), 2) as avg_item_quantity_per_order,\n        round(cast(sum(order_line_item_total) as numeric(28,6)), 2) as total_order_line_item_total,\n        round(cast(avg(order_line_item_total) as numeric(28,6)), 2) as avg_order_line_item_total\n    from billing\n    where lower(order_status) not in ('error', 'cancelled', 'queued') --possible values: success, error, queued, skipped, refunded or partially_refunded\n    group by 1\n\n), charge_aggs as (\n    select \n        customer_id,\n        count(distinct charge_id) as charges_count,\n        round(cast(sum(charge_total_price) as numeric(28,6)), 2) as total_amount_charged,\n        round(cast(avg(charge_total_price) as numeric(28,6)), 2) as avg_amount_charged,\n        round(cast(sum(charge_total_tax) as numeric(28,6)), 2) as total_amount_taxed,\n        round(cast(sum(charge_total_discounts) as numeric(28,6)), 2) as total_amount_discounted,\n        round(cast(sum(charge_total_refunds) as numeric(28,6)), 2) as total_refunds,\n        count(case when lower(billing.charge_type) = 'checkout' then 1 else null end) as total_one_time_purchases\n    from billing\n    where lower(charge_status) not in ('error', 'skipped', 'queued')\n    group by 1\n\n), subscriptions as (\n    select \n        customer_id,\n        count(subscription_id) as calculated_subscriptions_active_count -- this value may differ from the recharge-provided subscriptions_active_count. See DECISIONLOG. \n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge_source\".\"stg_recharge__subscription\"\n    where lower(subscription_status) = 'active'\n    group by 1\n\n), joined as (\n    select \n        customers.*,\n        order_aggs.total_orders,\n        order_aggs.total_amount_ordered,\n        order_aggs.avg_order_amount,\n        order_aggs.total_order_line_item_total,\n        order_aggs.avg_order_line_item_total,\n        order_aggs.avg_item_quantity_per_order, --units_per_transaction\n        charge_aggs.total_amount_charged,\n        charge_aggs.avg_amount_charged,\n        charge_aggs.charges_count,\n        charge_aggs.total_amount_taxed,\n        charge_aggs.total_amount_discounted,\n        charge_aggs.total_refunds,\n        charge_aggs.total_one_time_purchases,\n        round(cast(charge_aggs.avg_amount_charged - charge_aggs.total_refunds as numeric(28,6)), 2) \n            as total_net_spend,\n        coalesce(subscriptions.calculated_subscriptions_active_count, 0) as calculated_subscriptions_active_count\n    from customers\n    left join charge_aggs \n        on charge_aggs.customer_id = customers.customer_id\n    left join order_aggs\n        on order_aggs.customer_id = customers.customer_id\n    left join subscriptions\n        on subscriptions.customer_id = customers.customer_id\n\n)\n\nselect * \nfrom joined\n), customers as (\n    select *\n    from __dbt__cte__int_recharge__customer_details \n\n), enriched as (\n    select \n        customers.*,\n        case when subscriptions_active_count > 0 \n            then true else false end as is_currently_subscribed,\n        case when \n        ((\n    current_timestamp::timestamp\n)::date - (first_charge_processed_at)::date)\n     <= 30\n            then true else false end as is_new_customer,\n        round(cast(\n        ((\n    current_timestamp::timestamp\n)::date - (first_charge_processed_at)::date)\n     / 30 as numeric(28,6)), 2)\n            as active_months\n    from customers\n\n), aggs as (\n    select\n        enriched.*,\n        \n        \n            round(cast(\n    ( total_orders ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as orders_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_ordered ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_ordered_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_one_time_purchases ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as one_time_purchases_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_charged ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_charged_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_discounted ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_discounted_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_taxed ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_taxed_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_net_spend ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as net_spend_monthly_average -- calculates average over no. active mos\n            \n    from enriched\n)\n\nselect * \nfrom aggs", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__customer_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.264960Z", "completed_at": "2024-07-09T21:13:26.270524Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.270751Z", "completed_at": "2024-07-09T21:13:26.270759Z"}], "thread_id": "Thread-7", "execution_time": 0.0138702392578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__customer_details_customer_id.598dec46b9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__customer_details\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.257612Z", "completed_at": "2024-07-09T21:13:26.271152Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.272078Z", "completed_at": "2024-07-09T21:13:26.272081Z"}], "thread_id": "Thread-5", "execution_time": 0.016371965408325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.recharge.recharge__churn_analysis", "compiled": true, "compiled_code": "with customers as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__customer_details\"\n\n), churn_types as (\n    select \n        customers.*,\n        case when calculated_subscriptions_active_count > 0 and has_valid_payment_method = true\n            then false else true\n            end as is_churned,\n        \n        case when calculated_subscriptions_active_count = 0 and has_valid_payment_method = false\n            then 'passive cancellation'\n        when calculated_subscriptions_active_count = 0 and has_valid_payment_method = true\n            then 'active cancellation'\n        when calculated_subscriptions_active_count > 0 and has_valid_payment_method = false\n            then 'charge error'\n        else cast(null as TEXT)\n        end as churn_type\n    from customers\n)\n\nselect *\nfrom churn_type", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.267741Z", "completed_at": "2024-07-09T21:13:26.271860Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.272884Z", "completed_at": "2024-07-09T21:13:26.272889Z"}], "thread_id": "Thread-4", "execution_time": 0.015582799911499023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.unique_recharge__customer_details_customer_id.bc46ecdbae", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__customer_details\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.273886Z", "completed_at": "2024-07-09T21:13:26.347211Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.347468Z", "completed_at": "2024-07-09T21:13:26.347474Z"}], "thread_id": "Thread-8", "execution_time": 0.07419586181640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__customer_daily_rollup", "compiled": true, "compiled_code": "with  __dbt__cte__int_recharge__customer_daily_rollup as (\nwith calendar as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"int_recharge__calendar_spine\"\n\n), customers as (\n    select \n        customer_id, \n        customer_created_at\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__customer_details\"\n\n), customers_dates as (\n    select \n        customers.customer_id,\n        calendar.date_day,\n        cast(date_trunc('week', calendar.date_day) as date) as date_week,\n        cast(date_trunc('month', calendar.date_day) as date) as date_month,\n        cast(date_trunc('year', calendar.date_day) as date) as date_year\n    from calendar\n    cross join customers\n    where cast(date_trunc('day', customers.customer_created_at) as date) <= calendar.date_day\n)\n\nselect *\nfrom customers_dates\n), spine as (\n    select *\n    from __dbt__cte__int_recharge__customer_daily_rollup\n\n), billing as (\n    select \n        *,\n        case when lower(order_type) = 'recurring' and lower(order_status) not in ('error', 'cancelled', 'queued') \n            then charge_total_price - charge_total_refunds\n            else 0 end as charge_recurring_net_amount,\n        case when lower(order_type) = 'checkout' and lower(order_status) not in ('error', 'cancelled', 'queued')\n            then charge_total_price - charge_total_refunds\n            else 0 end as charge_one_time_net_amount,\n        case when lower(order_type) = 'recurring' and lower(order_status) not in ('error', 'cancelled', 'queued') \n            then calculated_order_total_price - calculated_order_total_refunds\n            else 0 end as calculated_order_recurring_net_amount,\n        case when lower(order_type) = 'checkout' and lower(order_status) not in ('error', 'cancelled', 'queued')\n            then calculated_order_total_price - calculated_order_total_refunds\n            else 0 end as calculated_order_one_time_net_amount\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__billing_history\"\n\n), customers as (\n    select \n        customer_id,\n        first_charge_processed_at\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__customer_details\"\n\n), aggs as (\n    select\n        spine.customer_id,\n        spine.date_day,\n        spine.date_week,\n        spine.date_month,\n        spine.date_year,\n        count(billing.order_id) as no_of_orders,\n        count(case when lower(billing.order_type) = 'recurring' then 1 else null end) as recurring_orders,\n        count(case when lower(billing.order_type) = 'checkout' then 1 else null end) as one_time_orders,\n        coalesce(sum(billing.charge_total_price), 0) as total_charges,\n        \n        \n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_price else 0 end) as numeric(28,6)), 2)\n                as charge_total_price_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_discounts else 0 end) as numeric(28,6)), 2)\n                as charge_total_discounts_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_tax else 0 end) as numeric(28,6)), 2)\n                as charge_total_tax_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_refunds else 0 end) as numeric(28,6)), 2)\n                as charge_total_refunds_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_discounts else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_discounts_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_tax else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_tax_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_price else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_price_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_refunds else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_refunds_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.order_line_item_total else 0 end) as numeric(28,6)), 2)\n                as order_line_item_total_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.order_item_quantity else 0 end) as numeric(28,6)), 2)\n                as order_item_quantity_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_recurring_net_amount else 0 end) as numeric(28,6)), 2)\n                as charge_recurring_net_amount_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_one_time_net_amount else 0 end) as numeric(28,6)), 2)\n                as charge_one_time_net_amount_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_recurring_net_amount else 0 end) as numeric(28,6)), 2)\n                as calculated_order_recurring_net_amount_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_one_time_net_amount else 0 end) as numeric(28,6)), 2)\n                as calculated_order_one_time_net_amount_realized\n            \n    from spine\n    left join billing\n        on cast(date_trunc('day', billing.order_processed_at) as date) = spine.date_day\n        and billing.customer_id = spine.customer_id\n    group by 1,2,3,4,5\n\n), aggs_running as (\n    select\n        *,\n        \n            round(cast(sum(charge_total_price_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_price_running_total\n            ,\n            round(cast(sum(charge_total_discounts_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_discounts_running_total\n            ,\n            round(cast(sum(charge_total_tax_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_tax_running_total\n            ,\n            round(cast(sum(charge_total_refunds_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_refunds_running_total\n            ,\n            round(cast(sum(calculated_order_total_discounts_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_discounts_running_total\n            ,\n            round(cast(sum(calculated_order_total_tax_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_tax_running_total\n            ,\n            round(cast(sum(calculated_order_total_price_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_price_running_total\n            ,\n            round(cast(sum(calculated_order_total_refunds_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_refunds_running_total\n            ,\n            round(cast(sum(order_line_item_total_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as order_line_item_total_running_total\n            ,\n            round(cast(sum(order_item_quantity_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as order_item_quantity_running_total\n            ,\n            round(cast(sum(charge_recurring_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_recurring_net_amount_running_total\n            ,\n            round(cast(sum(charge_one_time_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_one_time_net_amount_running_total\n            ,\n            round(cast(sum(calculated_order_recurring_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_recurring_net_amount_running_total\n            ,\n            round(cast(sum(calculated_order_one_time_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_one_time_net_amount_running_total\n            \n    from aggs\n\n), active_months as (\n    select\n        aggs_running.*,\n        round(cast(\n        ((aggs_running.date_day)::date - (customers.first_charge_processed_at)::date)\n     / 30 \n            as numeric(28,6)), 2)\n            as active_months_to_date\n    from aggs_running\n    left join customers\n        on customers.customer_id = aggs_running.customer_id\n)\n\nselect * \nfrom active_months", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__customer_daily_rollup\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.349049Z", "completed_at": "2024-07-09T21:13:26.356037Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.356246Z", "completed_at": "2024-07-09T21:13:26.356251Z"}], "thread_id": "Thread-6", "execution_time": 0.007966995239257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__monthly_recurring_revenue", "compiled": true, "compiled_code": "with aggs as (\n    select \n        date_month,\n        customer_id,\n        sum(recurring_orders) as recurring_orders,\n        round(cast(sum(charge_recurring_net_amount_realized) as numeric(28,6)), 2) as total_net_recurring_charges,\n        round(cast(sum(calculated_order_recurring_net_amount_realized) as numeric(28,6)), 2) as calculated_net_order_mrr,\n        sum(one_time_orders) as one_time_orders,\n        round(cast(sum(charge_one_time_net_amount_realized) as numeric(28,6)), 2) as total_net_one_time_charges,\n        round(cast(sum(calculated_order_one_time_net_amount_realized) as numeric(28,6)), 2) as calculated_net_order_one_times\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__customer_daily_rollup\"\n    group by 1,2\n)\n\nselect *\nfrom aggs", "relation_name": "\"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__monthly_recurring_revenue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.352584Z", "completed_at": "2024-07-09T21:13:26.356643Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.356881Z", "completed_at": "2024-07-09T21:13:26.356884Z"}], "thread_id": "Thread-2", "execution_time": 0.0048677921295166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__customer_daily_rollup_customer_id__date_day.6ac34efe6c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, date_day\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__customer_daily_rollup\"\n    group by customer_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T21:13:26.357940Z", "completed_at": "2024-07-09T21:13:26.360744Z"}, {"name": "execute", "started_at": "2024-07-09T21:13:26.360957Z", "completed_at": "2024-07-09T21:13:26.360961Z"}], "thread_id": "Thread-1", "execution_time": 0.00351715087890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__monthly_recurring_revenue_customer_id__date_month.05cb3c9e75", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, date_month\n    from \"postgres\".\"zz_dbt_catherine_recharge_2_recharge\".\"recharge__monthly_recurring_revenue\"\n    group by customer_id, date_month\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 4.891692161560059, "args": {"populate_cache": true, "send_anonymous_usage_stats": true, "require_explicit_package_overrides_for_builtin_materializations": true, "use_colors_file": true, "partial_parse_file_diff": true, "strict_mode": false, "favor_state": false, "log_file_max_bytes": 10485760, "log_path": "/Users/catherinefritz/Documents/dbt_packages/recharge/dbt_recharge/integration_tests/logs", "static": false, "show_resource_report": false, "static_parser": true, "exclude": [], "project_dir": "/Users/catherinefritz/Documents/dbt_packages/recharge/dbt_recharge/integration_tests", "version_check": true, "introspect": true, "write_json": true, "log_level": "info", "source_freshness_run_project_hooks": false, "cache_selected_only": false, "use_colors": true, "compile": true, "macro_debugging": false, "enable_legacy_logger": false, "log_format_file": "debug", "select": [], "print": true, "invocation_command": "dbt docs generate", "empty_catalog": false, "log_level_file": "debug", "printer_width": 80, "partial_parse": true, "quiet": false, "warn_error_options": {"include": [], "exclude": []}, "indirect_selection": "eager", "profiles_dir": "/Users/catherinefritz/.dbt", "which": "generate", "defer": false, "require_resource_names_without_spaces": false, "log_format": "default", "vars": {}}}