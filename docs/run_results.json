{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2024-08-12T22:21:09.324481Z", "invocation_id": "2d3951f8-1db5-4110-80a2-e51c45f7b727", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.361433Z", "completed_at": "2024-08-12T22:21:06.376942Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.380341Z", "completed_at": "2024-08-12T22:21:06.380350Z"}], "thread_id": "Thread-2", "execution_time": 0.036866188049316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_discounts_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"address_discounts_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_discounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.364746Z", "completed_at": "2024-08-12T22:21:06.379343Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.381001Z", "completed_at": "2024-08-12T22:21:06.381004Z"}], "thread_id": "Thread-3", "execution_time": 0.03609776496887207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_shipping_line_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"address_shipping_line_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.367217Z", "completed_at": "2024-08-12T22:21:06.379899Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.381539Z", "completed_at": "2024-08-12T22:21:06.381542Z"}], "thread_id": "Thread-4", "execution_time": 0.03601980209350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"address_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.369502Z", "completed_at": "2024-08-12T22:21:06.380129Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.381892Z", "completed_at": "2024-08-12T22:21:06.381896Z"}], "thread_id": "Thread-5", "execution_time": 0.03578591346740723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_discount_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"charge_discount_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_discount_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.371749Z", "completed_at": "2024-08-12T22:21:06.380775Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.382725Z", "completed_at": "2024-08-12T22:21:06.382728Z"}], "thread_id": "Thread-6", "execution_time": 0.03622889518737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_line_item_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"charge_line_item_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_line_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.374525Z", "completed_at": "2024-08-12T22:21:06.381339Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.383383Z", "completed_at": "2024-08-12T22:21:06.383386Z"}], "thread_id": "Thread-7", "execution_time": 0.023867130279541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_order_attribute_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"charge_order_attribute_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_order_attribute_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.377176Z", "completed_at": "2024-08-12T22:21:06.382244Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.384239Z", "completed_at": "2024-08-12T22:21:06.384242Z"}], "thread_id": "Thread-8", "execution_time": 0.023391008377075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_shipping_line_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"charge_shipping_line_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.387766Z", "completed_at": "2024-08-12T22:21:06.402081Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.404954Z", "completed_at": "2024-08-12T22:21:06.404959Z"}], "thread_id": "Thread-2", "execution_time": 0.02040696144104004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_tax_line_tmp", "compiled": true, "compiled_code": "\nselect *\nfrom \"postgres\".\"zz_recharge\".\"charge_tax_line_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_tax_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.390386Z", "completed_at": "2024-08-12T22:21:06.402337Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.405743Z", "completed_at": "2024-08-12T22:21:06.405750Z"}], "thread_id": "Thread-3", "execution_time": 0.020701169967651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"charge_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.395185Z", "completed_at": "2024-08-12T22:21:06.404725Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.406322Z", "completed_at": "2024-08-12T22:21:06.406325Z"}], "thread_id": "Thread-5", "execution_time": 0.02047586441040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__discount_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"discount_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__discount_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.392587Z", "completed_at": "2024-08-12T22:21:06.405302Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.407166Z", "completed_at": "2024-08-12T22:21:06.407169Z"}], "thread_id": "Thread-4", "execution_time": 0.02158498764038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__customer_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"customer_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.397445Z", "completed_at": "2024-08-12T22:21:06.405536Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.407504Z", "completed_at": "2024-08-12T22:21:06.407507Z"}], "thread_id": "Thread-6", "execution_time": 0.020975112915039062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__one_time_product_tmp", "compiled": true, "compiled_code": "\nselect *\nfrom \"postgres\".\"zz_recharge\".\"one_time_product_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__one_time_product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.399879Z", "completed_at": "2024-08-12T22:21:06.406082Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.408095Z", "completed_at": "2024-08-12T22:21:06.408098Z"}], "thread_id": "Thread-7", "execution_time": 0.021175861358642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order_line_item_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"order_line_item_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order_line_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.402540Z", "completed_at": "2024-08-12T22:21:06.406984Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.408962Z", "completed_at": "2024-08-12T22:21:06.408965Z"}], "thread_id": "Thread-8", "execution_time": 0.02146291732788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"subscription_history_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.414738Z", "completed_at": "2024-08-12T22:21:06.416612Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.421322Z", "completed_at": "2024-08-12T22:21:06.421326Z"}], "thread_id": "Thread-3", "execution_time": 0.011596918106079102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.417051Z", "completed_at": "2024-08-12T22:21:06.418193Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.423255Z", "completed_at": "2024-08-12T22:21:06.423258Z"}], "thread_id": "Thread-5", "execution_time": 0.013051986694335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.address_discounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.418633Z", "completed_at": "2024-08-12T22:21:06.419772Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.425523Z", "completed_at": "2024-08-12T22:21:06.425526Z"}], "thread_id": "Thread-4", "execution_time": 0.014643192291259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.address_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.420005Z", "completed_at": "2024-08-12T22:21:06.421107Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.425871Z", "completed_at": "2024-08-12T22:21:06.425875Z"}], "thread_id": "Thread-6", "execution_time": 0.01475214958190918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.411948Z", "completed_at": "2024-08-12T22:21:06.421684Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.426455Z", "completed_at": "2024-08-12T22:21:06.426459Z"}], "thread_id": "Thread-2", "execution_time": 0.017798900604248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_recharge\".\"subscription_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.421881Z", "completed_at": "2024-08-12T22:21:06.423044Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.426802Z", "completed_at": "2024-08-12T22:21:06.426805Z"}], "thread_id": "Thread-7", "execution_time": 0.015289068222045898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_discount_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.423598Z", "completed_at": "2024-08-12T22:21:06.425326Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.427381Z", "completed_at": "2024-08-12T22:21:06.427384Z"}], "thread_id": "Thread-8", "execution_time": 0.013315200805664062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.431069Z", "completed_at": "2024-08-12T22:21:06.432259Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.436901Z", "completed_at": "2024-08-12T22:21:06.436905Z"}], "thread_id": "Thread-3", "execution_time": 0.008783102035522461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_order_attribute_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.432837Z", "completed_at": "2024-08-12T22:21:06.433938Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.440469Z", "completed_at": "2024-08-12T22:21:06.440472Z"}], "thread_id": "Thread-5", "execution_time": 0.011660099029541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.434315Z", "completed_at": "2024-08-12T22:21:06.435402Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.442087Z", "completed_at": "2024-08-12T22:21:06.442091Z"}], "thread_id": "Thread-4", "execution_time": 0.012845039367675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_tax_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.435592Z", "completed_at": "2024-08-12T22:21:06.436683Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.442410Z", "completed_at": "2024-08-12T22:21:06.442413Z"}], "thread_id": "Thread-6", "execution_time": 0.012951135635375977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.checkout_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.437233Z", "completed_at": "2024-08-12T22:21:06.438336Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.442931Z", "completed_at": "2024-08-12T22:21:06.442933Z"}], "thread_id": "Thread-2", "execution_time": 0.013078927993774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.438524Z", "completed_at": "2024-08-12T22:21:06.440273Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.443257Z", "completed_at": "2024-08-12T22:21:06.443260Z"}], "thread_id": "Thread-7", "execution_time": 0.013198137283325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.discount_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.440800Z", "completed_at": "2024-08-12T22:21:06.441894Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.443769Z", "completed_at": "2024-08-12T22:21:06.443772Z"}], "thread_id": "Thread-8", "execution_time": 0.0133209228515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.one_time_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.447303Z", "completed_at": "2024-08-12T22:21:06.448446Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.453793Z", "completed_at": "2024-08-12T22:21:06.453797Z"}], "thread_id": "Thread-3", "execution_time": 0.009339332580566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.449043Z", "completed_at": "2024-08-12T22:21:06.450198Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.465013Z", "completed_at": "2024-08-12T22:21:06.465018Z"}], "thread_id": "Thread-5", "execution_time": 0.019918203353881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.order_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.450589Z", "completed_at": "2024-08-12T22:21:06.451683Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.469252Z", "completed_at": "2024-08-12T22:21:06.469257Z"}], "thread_id": "Thread-4", "execution_time": 0.02373790740966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.orders_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.451873Z", "completed_at": "2024-08-12T22:21:06.453597Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.469628Z", "completed_at": "2024-08-12T22:21:06.469631Z"}], "thread_id": "Thread-6", "execution_time": 0.02387094497680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.subscription_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.454128Z", "completed_at": "2024-08-12T22:21:06.455226Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:06.470185Z", "completed_at": "2024-08-12T22:21:06.470188Z"}], "thread_id": "Thread-2", "execution_time": 0.024046897888183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.519018Z", "completed_at": "2024-08-12T22:21:07.086378Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:07.087220Z", "completed_at": "2024-08-12T22:21:07.087230Z"}], "thread_id": "Thread-2", "execution_time": 0.6859498023986816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        price,\n        code,\n        title\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.465382Z", "completed_at": "2024-08-12T22:21:07.088028Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:07.088365Z", "completed_at": "2024-08-12T22:21:07.088369Z"}], "thread_id": "Thread-8", "execution_time": 0.7135601043701172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_shipping_line_tmp\"\n),\n\nfields as (\n    \n    select\n        \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        address_id,\n        index,\n        price,\n        code,\n        title\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.455418Z", "completed_at": "2024-08-12T22:21:07.086977Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:07.087791Z", "completed_at": "2024-08-12T22:21:07.087794Z"}], "thread_id": "Thread-7", "execution_time": 0.7142961025238037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_discounts", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_discounts_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_id,\n        address_id,\n        index\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_discounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.347029Z", "completed_at": "2024-08-12T22:21:07.086716Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:07.087504Z", "completed_at": "2024-08-12T22:21:07.087508Z"}], "thread_id": "Thread-1", "execution_time": 0.8183951377868652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.int_recharge__calendar_spine", "compiled": true, "compiled_code": "with spine as (\n    \n    \n    \n        \n            \n            \n            \n        \n\n    \n    \n\n    \n    \n    \n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 61\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2022-09-08'as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-11-08'as date)\n\n)\n\nselect * from filtered\n\n\n)\n\nselect *\nfrom spine", "relation_name": "\"postgres\".\"zz_recharge_recharge\".\"int_recharge__calendar_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.515318Z", "completed_at": "2024-08-12T22:21:07.116845Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:07.117121Z", "completed_at": "2024-08-12T22:21:07.117126Z"}], "thread_id": "Thread-6", "execution_time": 0.7108221054077148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_order_attribute", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_order_attribute_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_attribute\n    \n as \n    \n    order_attribute\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        order_attribute\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_order_attribute\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.511150Z", "completed_at": "2024-08-12T22:21:07.160049Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:07.161952Z", "completed_at": "2024-08-12T22:21:07.161956Z"}], "thread_id": "Thread-4", "execution_time": 0.737001895904541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_line_item", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_line_item_tmp\"\n),\n\nfields as (\n    \n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    tax_due\n    \n as \n    \n    tax_due\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    taxable_amount\n    \n as \n    \n    taxable_amount\n    \n, \n    \n    \n    unit_price_includes_tax\n    \n as \n    \n    unit_price_includes_tax\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    \n    \n    purchase_item_id\n    \n as \n    \n    purchase_item_id\n    \n, \n    \n    \n    purchase_item_type\n    \n as \n    \n    purchase_item_type\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        charge_id,\n        index,\n        vendor,\n        title,\n        variant_title,\n        sku,\n        grams,\n        quantity,\n        cast(total_price as float) as total_price,\n        unit_price,\n        tax_due,\n        taxable,\n        taxable_amount,\n        unit_price_includes_tax,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        purchase_item_id,\n        purchase_item_type\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.474812Z", "completed_at": "2024-08-12T22:21:07.161717Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:07.163494Z", "completed_at": "2024-08-12T22:21:07.163497Z"}], "thread_id": "Thread-3", "execution_time": 0.7383930683135986, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n, \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as TEXT) as \n    \n    payment_method_id\n    \n \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as address_id,\n        customer_id,\n        first_name,\n        last_name,\n        cast(created_at as timestamp) as address_created_at,\n        cast(updated_at as timestamp) as address_updated_at,\n        address_1 as address_line_1,\n        address_2 as address_line_2,\n        city,\n        province,\n        zip,\n        country_code,\n        country,\n        company,\n        phone,\n        payment_method_id\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:06.507508Z", "completed_at": "2024-08-12T22:21:07.162233Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:07.163721Z", "completed_at": "2024-08-12T22:21:07.163724Z"}], "thread_id": "Thread-5", "execution_time": 0.7497332096099854, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_discount", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_discount_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        id as discount_id, \n        code,\n        cast(value as float) as discount_value,\n        value_type\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_discount\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:07.165429Z", "completed_at": "2024-08-12T22:21:08.011118Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.011523Z", "completed_at": "2024-08-12T22:21:08.011539Z"}], "thread_id": "Thread-2", "execution_time": 0.9448919296264648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_tax_line", "compiled": true, "compiled_code": "\nwith base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        price,\n        rate,\n        title\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_tax_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.125412Z", "completed_at": "2024-08-12T22:21:08.138984Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.151035Z", "completed_at": "2024-08-12T22:21:08.151041Z"}], "thread_id": "Thread-2", "execution_time": 0.035607099533081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order_tmp", "compiled": true, "compiled_code": "select *\nfrom\n\"postgres\".\"zz_recharge\".\"orders_data\"", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:07.174507Z", "completed_at": "2024-08-12T22:21:08.070017Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.070311Z", "completed_at": "2024-08-12T22:21:08.070318Z"}], "thread_id": "Thread-7", "execution_time": 0.9882922172546387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__discount", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__discount_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    usage_limits\n    \n as \n    \n    usage_limits\n    \n, \n    \n    \n    applies_to\n    \n as \n    \n    applies_to\n    \n, \n    \n    \n    applies_to_resource\n    \n as \n    \n    applies_to_resource\n    \n, \n    \n    \n    applies_to_id\n    \n as \n    \n    applies_to_id\n    \n, \n    \n    \n    applies_to_product_type\n    \n as \n    \n    applies_to_product_type\n    \n, \n    \n    \n    minimum_order_amount\n    \n as \n    \n    minimum_order_amount\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_id,\n        cast(created_at as timestamp) as discount_created_at,\n        cast(updated_at as timestamp) as discount_updated_at,\n        cast(starts_at as timestamp) as discount_starts_at,\n        cast(ends_at as timestamp) as discount_ends_at,\n        code,\n        value,\n        status,\n        usage_limits,\n        applies_to,\n        applies_to_resource,\n        applies_to_id,\n        applies_to_product_type,\n        minimum_order_amount\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__discount\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:07.169960Z", "completed_at": "2024-08-12T22:21:08.070621Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.070875Z", "completed_at": "2024-08-12T22:21:08.070879Z"}], "thread_id": "Thread-8", "execution_time": 0.9888598918914795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_hash\n    \n as \n    \n    customer_hash\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    scheduled_at\n    \n as \n    \n    scheduled_at\n    \n, \n    \n    \n    orders_count\n    \n as \n    \n    orders_count\n    \n, \n    \n    \n    external_order_id_ecommerce\n    \n as \n    \n    external_order_id_ecommerce\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    tags\n    \n as \n    \n    tags\n    \n, \n    \n    \n    tax_lines\n    \n as \n    \n    tax_lines\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_weight_grams\n    \n as \n    \n    total_weight_grams\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    total_refunds\n    \n as \n    \n    total_refunds\n    \n, \n    \n    \n    external_transaction_id_payment_processor\n    \n as \n    \n    external_transaction_id_payment_processor\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    payment_processor\n    \n as \n    \n    payment_processor\n    \n, \n    cast(null as boolean) as \n    \n    has_uncommitted_changes\n    \n , \n    \n    \n    retry_date\n    \n as \n    \n    retry_date\n    \n, \n    \n    \n    error_type\n    \n as \n    \n    error_type\n    \n, \n    \n    \n    error\n    \n as \n    \n    error\n    \n, \n    \n    \n    charge_attempts\n    \n as \n    \n    charge_attempts\n    \n, \n    \n    \n    external_variant_id_not_found\n    \n as \n    \n    external_variant_id_not_found\n    \n, \n    \n    \n    client_details_browser_ip\n    \n as \n    \n    client_details_browser_ip\n    \n, \n    \n    \n    client_details_user_agent\n    \n as \n    \n    client_details_user_agent\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as charge_id,\n        customer_id,\n        customer_hash,\n        email,\n        cast(created_at as timestamp) as charge_created_at,\n        type as charge_type,\n        status as charge_status,\n        cast(updated_at as timestamp) as charge_updated_at,\n        note,\n        subtotal_price,\n        tax_lines,\n        total_discounts,\n        total_line_items_price,\n        total_tax,\n        cast(total_price as float) as total_price,\n        total_refunds,\n        total_weight_grams,\n        cast(scheduled_at as timestamp) as charge_scheduled_at,\n        cast(processed_at as timestamp) as charge_processed_at,\n        payment_processor,\n        external_transaction_id_payment_processor,\n        external_order_id_ecommerce,\n        orders_count,\n        has_uncommitted_changes,\n        cast(retry_date as timestamp) as retry_date,\n        error_type,\n        charge_attempts as times_retried,\n        address_id,\n        client_details_browser_ip,\n        client_details_user_agent,\n        tags,\n        error,\n        external_variant_id_not_found\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.170201Z", "completed_at": "2024-08-12T22:21:08.173878Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.174144Z", "completed_at": "2024-08-12T22:21:08.174151Z"}], "thread_id": "Thread-8", "execution_time": 0.019433975219726562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__address_shipping_line_address_id__index.ec269cbd74", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, index\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_shipping_line\"\n    group by address_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.164611Z", "completed_at": "2024-08-12T22:21:08.174798Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.175634Z", "completed_at": "2024-08-12T22:21:08.175639Z"}], "thread_id": "Thread-7", "execution_time": 0.021255970001220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_shipping_line_charge_id.2e2da51e26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_shipping_line\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.155136Z", "completed_at": "2024-08-12T22:21:08.175054Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.176129Z", "completed_at": "2024-08-12T22:21:08.176133Z"}], "thread_id": "Thread-2", "execution_time": 0.02307891845703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_shipping_line_charge_id__index.4b9ff30e99", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_shipping_line\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.178097Z", "completed_at": "2024-08-12T22:21:08.197108Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.200290Z", "completed_at": "2024-08-12T22:21:08.200297Z"}], "thread_id": "Thread-8", "execution_time": 0.02384781837463379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__address_shipping_line_address_id.f5fb6034fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_shipping_line\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.193942Z", "completed_at": "2024-08-12T22:21:08.200962Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.201915Z", "completed_at": "2024-08-12T22:21:08.201920Z"}], "thread_id": "Thread-7", "execution_time": 0.024377822875976562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__address_discounts_address_id__index.636bfd7451", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, index\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_discounts\"\n    group by address_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.197333Z", "completed_at": "2024-08-12T22:21:08.201645Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.202783Z", "completed_at": "2024-08-12T22:21:08.202787Z"}], "thread_id": "Thread-2", "execution_time": 0.024983644485473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__address_discounts_address_id.7225544f1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address_discounts\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.204361Z", "completed_at": "2024-08-12T22:21:08.215278Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.215541Z", "completed_at": "2024-08-12T22:21:08.215548Z"}], "thread_id": "Thread-8", "execution_time": 0.013306856155395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_order_attribute_charge_id__index.e3dda1974f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_order_attribute\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.208475Z", "completed_at": "2024-08-12T22:21:08.216759Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.219876Z", "completed_at": "2024-08-12T22:21:08.219880Z"}], "thread_id": "Thread-7", "execution_time": 0.015844106674194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_order_attribute_charge_id.8419846588", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_order_attribute\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.211355Z", "completed_at": "2024-08-12T22:21:08.219651Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.220298Z", "completed_at": "2024-08-12T22:21:08.220301Z"}], "thread_id": "Thread-2", "execution_time": 0.012743234634399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_line_item_charge_id__index.cba28984fe", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_line_item\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.216974Z", "completed_at": "2024-08-12T22:21:08.221160Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.221854Z", "completed_at": "2024-08-12T22:21:08.221858Z"}], "thread_id": "Thread-8", "execution_time": 0.0056498050689697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_line_item_charge_id.555f3f4938", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_line_item\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.222827Z", "completed_at": "2024-08-12T22:21:08.232500Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.232931Z", "completed_at": "2024-08-12T22:21:08.232935Z"}], "thread_id": "Thread-7", "execution_time": 0.011611223220825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__address_address_id.ffe947d70f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.225484Z", "completed_at": "2024-08-12T22:21:08.232719Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.233323Z", "completed_at": "2024-08-12T22:21:08.233327Z"}], "thread_id": "Thread-2", "execution_time": 0.011757850646972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__address_address_id.3ea4d98333", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    address_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__address\"\nwhere address_id is not null\ngroup by address_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.229752Z", "completed_at": "2024-08-12T22:21:08.233679Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.234397Z", "completed_at": "2024-08-12T22:21:08.234400Z"}], "thread_id": "Thread-8", "execution_time": 0.005238056182861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_discount_charge_id__index.87080ff978", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_discount\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.239250Z", "completed_at": "2024-08-12T22:21:08.278632Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.278892Z", "completed_at": "2024-08-12T22:21:08.278898Z"}], "thread_id": "Thread-2", "execution_time": 0.04400825500488281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_tax_line_charge_id__index.9fc228fecf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_tax_line\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.275935Z", "completed_at": "2024-08-12T22:21:08.284940Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.285164Z", "completed_at": "2024-08-12T22:21:08.285170Z"}], "thread_id": "Thread-8", "execution_time": 0.04938697814941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_tax_line_charge_id.f25f6cb759", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_tax_line\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.236069Z", "completed_at": "2024-08-12T22:21:08.288786Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.289012Z", "completed_at": "2024-08-12T22:21:08.289016Z"}], "thread_id": "Thread-7", "execution_time": 0.054335832595825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_discount_charge_id.2efab5c017", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_discount\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.290006Z", "completed_at": "2024-08-12T22:21:08.293516Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.293731Z", "completed_at": "2024-08-12T22:21:08.293735Z"}], "thread_id": "Thread-7", "execution_time": 0.004197120666503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__discount_discount_id.5e928f569c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    discount_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__discount\"\nwhere discount_id is not null\ngroup by discount_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.286147Z", "completed_at": "2024-08-12T22:21:08.300981Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.301838Z", "completed_at": "2024-08-12T22:21:08.301842Z"}], "thread_id": "Thread-8", "execution_time": 0.016157865524291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__discount_discount_id.71ea1251b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__discount\"\nwhere discount_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.294691Z", "completed_at": "2024-08-12T22:21:08.305550Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.305756Z", "completed_at": "2024-08-12T22:21:08.305760Z"}], "thread_id": "Thread-7", "execution_time": 0.011520147323608398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__charge_line_item_history", "compiled": true, "compiled_code": "with charges as (\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge\"\n\n), charge_line_items as (\n    select \n        charge_id,\n        index,\n        cast(total_price as float) as amount,\n        title,\n        'charge line' as line_item_type\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_line_item\"\n\n), charge_discounts as (\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_discount\"\n\n), discounts_enriched as (\n    select\n        charge_discounts.charge_id,\n        charge_discounts.index,\n        cast(case when lower(charge_discounts.value_type) = 'percentage'\n            then round(cast(charge_discounts.discount_value / 100 * charges.total_line_items_price as numeric(28,6)), 2)\n            else charge_discounts.discount_value \n            end as float) as amount,\n        charge_discounts.code as title,\n        'discount' as line_item_type\n    from charge_discounts\n    left join charges\n        on charges.charge_id = charge_discounts.charge_id\n\n), charge_shipping_lines as (\n    select \n        charge_id,\n        index,\n        cast(price as float) as amount,\n        title,\n        'shipping' as line_item_type\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_shipping_line\"\n\n), charge_tax_lines as (\n    \n        select \n            charge_id,\n            index,\n            cast(price as float) as amount,\n            title,\n            'tax' as line_item_type\n        from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_tax_line\" -- use this if possible since it is individual tax items\n    \n\n), refunds as (\n    select\n        charge_id,\n        0 as index,\n        cast(total_refunds as float) as amount,\n        'total refunds' as title,\n        'refund' as line_item_type\n    from charges -- have to extract refunds from charges table since a refund line item table is not available\n    where total_refunds > 0\n\n), unioned as (\n\n    select *\n    from charge_line_items\n\n    union all\n    select *\n    from discounts_enriched\n\n    union all\n    select *\n    from charge_shipping_lines\n\n    union all\n    select *\n    from charge_tax_lines\n    \n    union all\n    select *\n    from refunds\n\n), joined as (\n    select\n        unioned.charge_id,\n        row_number() over(partition by unioned.charge_id \n            order by unioned.line_item_type, unioned.index) \n            as charge_row_num,\n        unioned.index as source_index,\n        charges.charge_created_at,\n        charges.customer_id,\n        charges.address_id,\n        unioned.amount,\n        unioned.title,\n        unioned.line_item_type\n    from unioned\n    left join charges\n        on charges.charge_id = unioned.charge_id\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"zz_recharge_recharge\".\"recharge__charge_line_item_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.302983Z", "completed_at": "2024-08-12T22:21:08.306623Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.307056Z", "completed_at": "2024-08-12T22:21:08.307059Z"}], "thread_id": "Thread-8", "execution_time": 0.0045969486236572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_charge_id.e40d1f4998", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.307393Z", "completed_at": "2024-08-12T22:21:08.314351Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.314571Z", "completed_at": "2024-08-12T22:21:08.314575Z"}], "thread_id": "Thread-7", "execution_time": 0.008237123489379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__charge_charge_id.a013ccef10", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge\"\nwhere charge_id is not null\ngroup by charge_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.310668Z", "completed_at": "2024-08-12T22:21:08.318145Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.318359Z", "completed_at": "2024-08-12T22:21:08.318363Z"}], "thread_id": "Thread-8", "execution_time": 0.008188962936401367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__charge_line_item_history_charge_id__charge_row_num.1863e6df2f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, charge_row_num\n    from \"postgres\".\"zz_recharge_recharge\".\"recharge__charge_line_item_history\"\n    group by charge_id, charge_row_num\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.315607Z", "completed_at": "2024-08-12T22:21:08.318755Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.318970Z", "completed_at": "2024-08-12T22:21:08.318974Z"}], "thread_id": "Thread-7", "execution_time": 0.0038399696350097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__charge_line_item_history_charge_id.48a34a867c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_recharge_recharge\".\"recharge__charge_line_item_history\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:07.212431Z", "completed_at": "2024-08-12T22:21:08.130930Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.138759Z", "completed_at": "2024-08-12T22:21:08.138764Z"}], "thread_id": "Thread-4", "execution_time": 1.1296148300170898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order_line_item", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order_line_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    tax_due\n    \n as \n    \n    tax_due\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    taxable_amount\n    \n as \n    \n    taxable_amount\n    \n, \n    \n    \n    unit_price_includes_tax\n    \n as \n    \n    unit_price_includes_tax\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    purchase_item_id\n    \n as \n    \n    purchase_item_id\n    \n, \n    \n    \n    purchase_item_type\n    \n as \n    \n    purchase_item_type\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        order_id,\n        index,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        title as order_line_item_title,\n        variant_title as product_variant_title,\n        sku,\n        quantity,\n        grams,\n        cast(total_price as float) as total_price,\n        unit_price,\n        tax_due,\n        taxable,\n        taxable_amount,\n        unit_price_includes_tax,\n        purchase_item_id,\n        purchase_item_type\n\n        \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:07.179276Z", "completed_at": "2024-08-12T22:21:08.125192Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.130692Z", "completed_at": "2024-08-12T22:21:08.130699Z"}], "thread_id": "Thread-1", "execution_time": 1.177013874053955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__customer", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__customer_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    external_customer_id_ecommerce\n    \n as \n    \n    external_customer_id_ecommerce\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    first_charge_processed_at\n    \n as \n    \n    first_charge_processed_at\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    subscriptions_active_count\n    \n as \n    \n    subscriptions_active_count\n    \n, \n    \n    \n    subscriptions_total_count\n    \n as \n    \n    subscriptions_total_count\n    \n, \n    \n    \n    has_valid_payment_method\n    \n as \n    \n    has_valid_payment_method\n    \n, \n    \n    \n    has_payment_method_in_dunning\n    \n as \n    \n    has_payment_method_in_dunning\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    cast(null as TEXT) as \n    \n    billing_first_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_last_name\n    \n , \n    cast(null as TEXT) as \n    \n    billing_company\n    \n , \n    cast(null as TEXT) as \n    \n    billing_city\n    \n , \n    cast(null as TEXT) as \n    \n    billing_country\n    \n , \n    \n    \n    hash\n    \n as customer_hash \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as customer_id,\n        customer_hash,\n        external_customer_id_ecommerce,\n        email,\n        first_name,\n        last_name,\n        cast(created_at as timestamp) as customer_created_at,\n        cast(updated_at as timestamp) as customer_updated_at,\n        cast(first_charge_processed_at as timestamp) as first_charge_processed_at,\n        subscriptions_active_count,\n        subscriptions_total_count,\n        has_valid_payment_method,\n        has_payment_method_in_dunning,\n        tax_exempt,\n        billing_first_name,\n        billing_last_name,\n        billing_company,\n        billing_city,\n        billing_country\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:07.217267Z", "completed_at": "2024-08-12T22:21:08.153662Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.154699Z", "completed_at": "2024-08-12T22:21:08.154702Z"}], "thread_id": "Thread-3", "execution_time": 1.1327650547027588, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    cast(null as integer) as \n    \n    id\n    \n , \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    next_charge_scheduled_at\n    \n as \n    \n    next_charge_scheduled_at\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    cancellation_reason_comments\n    \n as \n    \n    cancellation_reason_comments\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    order_interval_unit\n    \n as \n    \n    order_interval_unit\n    \n, \n    \n    \n    order_interval_frequency\n    \n as \n    \n    order_interval_frequency\n    \n, \n    \n    \n    charge_interval_frequency\n    \n as \n    \n    charge_interval_frequency\n    \n, \n    \n    \n    order_day_of_week\n    \n as \n    \n    order_day_of_week\n    \n, \n    \n    \n    order_day_of_month\n    \n as \n    \n    order_day_of_month\n    \n, \n    \n    \n    expire_after_specific_number_of_charges\n    \n as \n    \n    expire_after_specific_number_of_charges\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        coalesce(cast(id as integer), cast(subscription_id as integer)) as subscription_id,\n        customer_id,\n        address_id,\n        cast(created_at as timestamp) as subscription_created_at,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        product_title,\n        variant_title,\n        sku,\n        cast(price as float) as price,\n        quantity,\n        status as subscription_status,\n        charge_interval_frequency,\n        order_interval_unit,\n        order_interval_frequency,\n        order_day_of_month,\n        order_day_of_week,\n        expire_after_specific_number_of_charges,\n        cast(updated_at as timestamp) as subscription_updated_at,\n        cast(next_charge_scheduled_at as timestamp) as subscription_next_charge_scheduled_at,\n        cast(cancelled_at as timestamp) as subscription_cancelled_at,\n        cancellation_reason,\n        cancellation_reason_comments,\n        _fivetran_synced,\n        row_number() over (partition by subscription_id order by updated_at desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:07.186172Z", "completed_at": "2024-08-12T22:21:08.151443Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.152112Z", "completed_at": "2024-08-12T22:21:08.152117Z"}], "thread_id": "Thread-6", "execution_time": 1.159468173980713, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__one_time_product", "compiled": true, "compiled_code": "\nwith base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__one_time_product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    next_charge_scheduled_at\n    \n as \n    \n    next_charge_scheduled_at\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as one_time_product_id,\n        address_id,\n        customer_id,\n        is_deleted,\n        cast(created_at as timestamp) as one_time_created_at,\n        cast(updated_at as timestamp) as one_time_updated_at,\n        next_charge_scheduled_at as one_time_next_charge_scheduled_at,\n        product_title,\n        variant_title,\n        price,\n        quantity,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        sku\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__one_time_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:07.224150Z", "completed_at": "2024-08-12T22:21:08.201458Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.202566Z", "completed_at": "2024-08-12T22:21:08.202569Z"}], "thread_id": "Thread-5", "execution_time": 1.1251626014709473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    next_charge_scheduled_at\n    \n as \n    \n    next_charge_scheduled_at\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    cancellation_reason_comments\n    \n as \n    \n    cancellation_reason_comments\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    order_interval_unit\n    \n as \n    \n    order_interval_unit\n    \n, \n    \n    \n    order_interval_frequency\n    \n as \n    \n    order_interval_frequency\n    \n, \n    \n    \n    charge_interval_frequency\n    \n as \n    \n    charge_interval_frequency\n    \n, \n    \n    \n    order_day_of_week\n    \n as \n    \n    order_day_of_week\n    \n, \n    \n    \n    order_day_of_month\n    \n as \n    \n    order_day_of_month\n    \n, \n    \n    \n    expire_after_specific_number_of_charges\n    \n as \n    \n    expire_after_specific_number_of_charges\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as subscription_id,\n        customer_id,\n        address_id,\n        cast(created_at as timestamp) as subscription_created_at,\n        product_title,\n        variant_title,\n        sku,\n        cast(price as float) as price,\n        quantity,\n        status as subscription_status,\n        next_charge_scheduled_at as subscription_next_charge_scheduled_at,\n        charge_interval_frequency,\n        expire_after_specific_number_of_charges,\n        order_interval_frequency,\n        order_interval_unit,\n        order_day_of_week,\n        order_day_of_month,\n        cast(updated_at as timestamp) as subscription_updated_at,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        cast(cancelled_at as timestamp) as subscription_cancelled_at,\n        cancellation_reason,\n        cancellation_reason_comments\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.345506Z", "completed_at": "2024-08-12T22:21:08.359358Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.360615Z", "completed_at": "2024-08-12T22:21:08.360620Z"}], "thread_id": "Thread-8", "execution_time": 0.01837015151977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__order_line_item_order_id__index.e56621b39a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order_line_item\"\n    group by order_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.349723Z", "completed_at": "2024-08-12T22:21:08.360375Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.361956Z", "completed_at": "2024-08-12T22:21:08.361959Z"}], "thread_id": "Thread-7", "execution_time": 0.01863884925842285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__customer_customer_id.0f267f14ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.353253Z", "completed_at": "2024-08-12T22:21:08.361242Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.365619Z", "completed_at": "2024-08-12T22:21:08.365624Z"}], "thread_id": "Thread-4", "execution_time": 0.02166891098022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__order_line_item_order_id.bf548aca5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order_line_item\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.355975Z", "completed_at": "2024-08-12T22:21:08.361419Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.365987Z", "completed_at": "2024-08-12T22:21:08.365990Z"}], "thread_id": "Thread-1", "execution_time": 0.021766185760498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__customer_customer_id.1dcf3f6410", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__customer\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.362498Z", "completed_at": "2024-08-12T22:21:08.373220Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.374754Z", "completed_at": "2024-08-12T22:21:08.374759Z"}], "thread_id": "Thread-3", "execution_time": 0.01520085334777832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__subscription_overview", "compiled": true, "compiled_code": "with subscriptions as (\n\n    select * \n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription_history\"\n    where is_most_recent_record\n\n), charges as (\n    select * \n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge\"\n    where lower(charge_type) = 'recurring'\n\n), charge_line_items as (\n    select * \n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_line_item\"\n\n), customers_charge_lines as (\n    select \n        charge_line_items.charge_id,\n        charge_line_items.purchase_item_id,\n        charge_line_items.external_product_id_ecommerce,\n        charge_line_items.external_variant_id_ecommerce,\n        charges.customer_id,\n        charges.address_id,\n        charges.charge_created_at,\n        charges.charge_status\n    from charge_line_items\n    left join charges\n        on charges.charge_id = charge_line_items.charge_id\n\n), subscriptions_charges as (\n    select \n        subscriptions.subscription_id,\n        count(case when lower(customers_charge_lines.charge_status) = 'success' \n            then 1 else null\n            end) as count_successful_charges,\n        count(case when lower(customers_charge_lines.charge_status) = 'queued' \n            then 1 else null\n            end) as count_queued_charges\n    from subscriptions\n    left join customers_charge_lines\n        on customers_charge_lines.purchase_item_id = subscriptions.subscription_id\n    group by 1\n\n), subscriptions_enriched as (\n    select\n        subscriptions.*,\n        subscriptions_charges.count_successful_charges,\n        subscriptions_charges.count_queued_charges,\n        case when subscription_next_charge_scheduled_at is null then null\n            when expire_after_specific_number_of_charges - count_successful_charges < 0 then null\n            else expire_after_specific_number_of_charges - count_successful_charges\n            end as charges_until_expiration,\n        case when lower(order_interval_unit) = 'month' then charge_interval_frequency * 30\n            when lower(order_interval_unit) = 'week' then charge_interval_frequency * 7\n            else charge_interval_frequency \n            end as charge_interval_frequency_days\n    from subscriptions\n    left join subscriptions_charges\n        on subscriptions_charges.subscription_id = subscriptions.subscription_id\n)\n\nselect * \nfrom subscriptions_enriched", "relation_name": "\"postgres\".\"zz_recharge_recharge\".\"recharge__subscription_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.366332Z", "completed_at": "2024-08-12T22:21:08.373742Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.375281Z", "completed_at": "2024-08-12T22:21:08.375284Z"}], "thread_id": "Thread-6", "execution_time": 0.015460968017578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__subscription_history_subscription_id__subscription_updated_at.7eefd56269", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, subscription_updated_at\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription_history\"\n    group by subscription_id, subscription_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.369608Z", "completed_at": "2024-08-12T22:21:08.374139Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.378218Z", "completed_at": "2024-08-12T22:21:08.378222Z"}], "thread_id": "Thread-5", "execution_time": 0.018160104751586914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__subscription_history_subscription_id.678aed985c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription_history\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.375639Z", "completed_at": "2024-08-12T22:21:08.387952Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.388938Z", "completed_at": "2024-08-12T22:21:08.388943Z"}], "thread_id": "Thread-8", "execution_time": 0.016689062118530273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__one_time_product_one_time_product_id.03a2a12d7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect one_time_product_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__one_time_product\"\nwhere one_time_product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.379053Z", "completed_at": "2024-08-12T22:21:08.388646Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.389894Z", "completed_at": "2024-08-12T22:21:08.389898Z"}], "thread_id": "Thread-7", "execution_time": 0.016499996185302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__one_time_product_one_time_product_id.8ccb87ed5b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    one_time_product_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__one_time_product\"\nwhere one_time_product_id is not null\ngroup by one_time_product_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.382936Z", "completed_at": "2024-08-12T22:21:08.389488Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.393025Z", "completed_at": "2024-08-12T22:21:08.393029Z"}], "thread_id": "Thread-4", "execution_time": 0.018750905990600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__subscription_subscription_id.c2f0892c32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.385466Z", "completed_at": "2024-08-12T22:21:08.390217Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.395889Z", "completed_at": "2024-08-12T22:21:08.395893Z"}], "thread_id": "Thread-1", "execution_time": 0.02139902114868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__subscription_subscription_id.bed39b80ea", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.390455Z", "completed_at": "2024-08-12T22:21:08.396459Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.396856Z", "completed_at": "2024-08-12T22:21:08.396859Z"}], "thread_id": "Thread-3", "execution_time": 0.008741140365600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__subscription_overview_subscription_id.edad857cc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_recharge_recharge\".\"recharge__subscription_overview\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.393382Z", "completed_at": "2024-08-12T22:21:08.396664Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:08.397189Z", "completed_at": "2024-08-12T22:21:08.397192Z"}], "thread_id": "Thread-6", "execution_time": 0.008813142776489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.unique_recharge__subscription_overview_subscription_id.ead71825cd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge\".\"recharge__subscription_overview\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:08.279959Z", "completed_at": "2024-08-12T22:21:09.094636Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.095005Z", "completed_at": "2024-08-12T22:21:09.095015Z"}], "thread_id": "Thread-2", "execution_time": 0.8679182529449463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    charge_status\n    \n as \n    \n    charge_status\n    \n, \n    \n    \n    is_prepaid\n    \n as \n    \n    is_prepaid\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    external_order_id_ecommerce\n    \n as \n    \n    external_order_id_ecommerce\n    \n, \n    \n    \n    external_order_number_ecommerce\n    \n as \n    \n    external_order_number_ecommerce\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    scheduled_at\n    \n as \n    \n    scheduled_at\n    \n, \n    \n    \n    shipped_date\n    \n as \n    \n    shipped_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as order_id,\n        external_order_id_ecommerce,\n        external_order_number_ecommerce,\n        customer_id,\n        email,\n        cast(created_at as timestamp) as order_created_at,\n        status as order_status,\n        cast(updated_at as timestamp) as order_updated_at,\n        charge_id,\n        transaction_id,\n        charge_status,\n        is_prepaid,\n        cast(total_price as float) as order_total_price,\n        type as order_type,\n        cast(processed_at as timestamp) as order_processed_at,\n        cast(scheduled_at as timestamp) as order_scheduled_at,\n        cast(shipped_date as timestamp) as order_shipped_date,\n        address_id,\n        is_deleted\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.165847Z", "completed_at": "2024-08-12T22:21:09.173481Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.173774Z", "completed_at": "2024-08-12T22:21:09.173780Z"}], "thread_id": "Thread-8", "execution_time": 0.023261070251464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__order_order_id.70fc03aaa7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.152205Z", "completed_at": "2024-08-12T22:21:09.174283Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.174892Z", "completed_at": "2024-08-12T22:21:09.174896Z"}], "thread_id": "Thread-5", "execution_time": 0.02529120445251465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__billing_history", "compiled": true, "compiled_code": "with orders as (\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order\"\n\n), order_line_items as (\n    select \n        order_id,\n        sum(quantity) as order_item_quantity,\n        round(cast(sum(total_price) as numeric(28,6)), 2) as order_line_item_total\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order_line_item\"\n    group by 1\n\n\n), charges as ( --each charge can have multiple orders associated with it\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge\"\n\n), charge_shipping_lines as (\n    select \n        charge_id,\n        round(cast(sum(price) as numeric(28,6)), 2) as total_shipping\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__charge_shipping_line\"\n    group by 1\n\n), charges_enriched as (\n    select\n        charges.*,\n        charge_shipping_lines.total_shipping\n    from charges\n    left join charge_shipping_lines\n        on charge_shipping_lines.charge_id = charges.charge_id\n\n), joined as (\n    select \n        orders.*,\n        -- recognized_total (calculated total based on prepaid subscriptions)\n        charges_enriched.charge_created_at,\n        charges_enriched.payment_processor,\n        charges_enriched.tags,\n        charges_enriched.orders_count,\n        charges_enriched.charge_type,\n        \n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_price, 0)\n                end as charge_total_price,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_price ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_price,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.subtotal_price, 0)\n                end as charge_subtotal_price,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.subtotal_price ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_subtotal_price,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.tax_lines, 0)\n                end as charge_tax_lines,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.tax_lines ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_tax_lines,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_discounts, 0)\n                end as charge_total_discounts,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_discounts ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_discounts,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_refunds, 0)\n                end as charge_total_refunds,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_refunds ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_refunds,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_tax, 0)\n                end as charge_total_tax,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_tax ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_tax,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_weight_grams, 0)\n                end as charge_total_weight_grams,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_weight_grams ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_weight_grams,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_shipping, 0)\n                end as charge_total_shipping,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_shipping ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_shipping,\n        \n        coalesce(order_line_items.order_item_quantity, 0) as order_item_quantity,\n        coalesce(order_line_items.order_line_item_total, 0) as order_line_item_total\n    from orders\n    left join order_line_items\n        on order_line_items.order_id = orders.order_id\n    left join charges_enriched -- still want to capture charges that don't have an order yet\n        on charges_enriched.charge_id = orders.charge_id\n\n), joined_enriched as (\n    select \n        joined.*,\n        -- total_price includes taxes and discounts, so only need to subtract total_refunds to get net.\n        charge_total_price - charge_total_refunds as total_net_charge_value,\n        calculated_order_total_price - calculated_order_total_refunds as total_calculated_net_order_value  \n    from joined\n)\n\nselect * \nfrom joined_enriched", "relation_name": "\"postgres\".\"zz_recharge_recharge\".\"recharge__billing_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.169594Z", "completed_at": "2024-08-12T22:21:09.174629Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.175318Z", "completed_at": "2024-08-12T22:21:09.175321Z"}], "thread_id": "Thread-7", "execution_time": 0.023924827575683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__order_order_id.bab2588ddd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__order\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.186167Z", "completed_at": "2024-08-12T22:21:09.192907Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.193252Z", "completed_at": "2024-08-12T22:21:09.193256Z"}], "thread_id": "Thread-3", "execution_time": 0.016326904296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__billing_history_order_id.d9c88b8dff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_recharge_recharge\".\"recharge__billing_history\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.189255Z", "completed_at": "2024-08-12T22:21:09.193652Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.194165Z", "completed_at": "2024-08-12T22:21:09.194169Z"}], "thread_id": "Thread-6", "execution_time": 0.016707897186279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.unique_recharge__billing_history_order_id.05decc3c47", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge\".\"recharge__billing_history\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.195092Z", "completed_at": "2024-08-12T22:21:09.217375Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.217582Z", "completed_at": "2024-08-12T22:21:09.217586Z"}], "thread_id": "Thread-4", "execution_time": 0.023090124130249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__customer_details", "compiled": true, "compiled_code": "with  __dbt__cte__int_recharge__customer_details as (\nwith customers as (\n    select *\n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__customer\"\n\n), billing as (\n    select * \n    from \"postgres\".\"zz_recharge_recharge\".\"recharge__billing_history\"\n\n-- Agg'd on customer_id\n), order_aggs as ( \n    select \n        customer_id,\n        count(order_id) as total_orders,\n        round(cast(sum(order_total_price) as numeric(28,6)), 2) as total_amount_ordered,\n        round(cast(avg(order_total_price) as numeric(28,6)), 2) as avg_order_amount,\n        round(cast(sum(order_item_quantity) as numeric(28,6)), 2) as total_quantity_ordered,\n        round(cast(avg(order_item_quantity) as numeric(28,6)), 2) as avg_item_quantity_per_order,\n        round(cast(sum(order_line_item_total) as numeric(28,6)), 2) as total_order_line_item_total,\n        round(cast(avg(order_line_item_total) as numeric(28,6)), 2) as avg_order_line_item_total\n    from billing\n    where lower(order_status) not in ('error', 'cancelled', 'queued') --possible values: success, error, queued, skipped, refunded or partially_refunded\n    group by 1\n\n), charge_aggs as (\n    select \n        customer_id,\n        count(distinct charge_id) as charges_count,\n        round(cast(sum(charge_total_price) as numeric(28,6)), 2) as total_amount_charged,\n        round(cast(avg(charge_total_price) as numeric(28,6)), 2) as avg_amount_charged,\n        round(cast(sum(charge_total_tax) as numeric(28,6)), 2) as total_amount_taxed,\n        round(cast(sum(charge_total_discounts) as numeric(28,6)), 2) as total_amount_discounted,\n        round(cast(sum(charge_total_refunds) as numeric(28,6)), 2) as total_refunds,\n        count(case when lower(billing.charge_type) = 'checkout' then 1 else null end) as total_one_time_purchases\n    from billing\n    where lower(charge_status) not in ('error', 'skipped', 'queued')\n    group by 1\n\n), subscriptions as (\n    select \n        customer_id,\n        count(subscription_id) as calculated_subscriptions_active_count -- this value may differ from the recharge-provided subscriptions_active_count. See DECISIONLOG. \n    from \"postgres\".\"zz_recharge_recharge_source\".\"stg_recharge__subscription\"\n    where lower(subscription_status) = 'active'\n    group by 1\n\n), joined as (\n    select \n        customers.*,\n        order_aggs.total_orders,\n        order_aggs.total_amount_ordered,\n        order_aggs.avg_order_amount,\n        order_aggs.total_order_line_item_total,\n        order_aggs.avg_order_line_item_total,\n        order_aggs.avg_item_quantity_per_order, --units_per_transaction\n        charge_aggs.total_amount_charged,\n        charge_aggs.avg_amount_charged,\n        charge_aggs.charges_count,\n        charge_aggs.total_amount_taxed,\n        charge_aggs.total_amount_discounted,\n        charge_aggs.total_refunds,\n        charge_aggs.total_one_time_purchases,\n        round(cast(charge_aggs.avg_amount_charged - charge_aggs.total_refunds as numeric(28,6)), 2) \n            as total_net_spend,\n        coalesce(subscriptions.calculated_subscriptions_active_count, 0) as calculated_subscriptions_active_count\n    from customers\n    left join charge_aggs \n        on charge_aggs.customer_id = customers.customer_id\n    left join order_aggs\n        on order_aggs.customer_id = customers.customer_id\n    left join subscriptions\n        on subscriptions.customer_id = customers.customer_id\n\n)\n\nselect * \nfrom joined\n), customers as (\n    select *\n    from __dbt__cte__int_recharge__customer_details \n\n), enriched as (\n    select \n        customers.*,\n        case when subscriptions_active_count > 0 \n            then true else false end as is_currently_subscribed,\n        case when \n        ((\n    current_timestamp::timestamp\n)::date - (first_charge_processed_at)::date)\n     <= 30\n            then true else false end as is_new_customer,\n        round(cast(\n        ((\n    current_timestamp::timestamp\n)::date - (first_charge_processed_at)::date)\n     / 30 as numeric(28,6)), 2)\n            as active_months\n    from customers\n\n), aggs as (\n    select\n        enriched.*,\n        \n        \n            round(cast(\n    ( total_orders ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as orders_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_ordered ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_ordered_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_one_time_purchases ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as one_time_purchases_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_charged ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_charged_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_discounted ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_discounted_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_taxed ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_taxed_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_net_spend ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as net_spend_monthly_average -- calculates average over no. active mos\n            \n    from enriched\n)\n\nselect * \nfrom aggs", "relation_name": "\"postgres\".\"zz_recharge_recharge\".\"recharge__customer_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.220171Z", "completed_at": "2024-08-12T22:21:09.233235Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.234002Z", "completed_at": "2024-08-12T22:21:09.234006Z"}], "thread_id": "Thread-5", "execution_time": 0.015522956848144531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.recharge.recharge__churn_analysis", "compiled": true, "compiled_code": "with customers as (\n    select *\n    from \"postgres\".\"zz_recharge_recharge\".\"recharge__customer_details\"\n\n), churn_types as (\n    select \n        customers.*,\n        case when calculated_subscriptions_active_count > 0 and has_valid_payment_method = true\n            then false else true\n            end as is_churned,\n        \n        case when calculated_subscriptions_active_count = 0 and has_valid_payment_method = false\n            then 'passive cancellation'\n        when calculated_subscriptions_active_count = 0 and has_valid_payment_method = true\n            then 'active cancellation'\n        when calculated_subscriptions_active_count > 0 and has_valid_payment_method = false\n            then 'charge error'\n        else cast(null as TEXT)\n        end as churn_type\n    from customers\n)\n\nselect *\nfrom churn_type", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.227666Z", "completed_at": "2024-08-12T22:21:09.233793Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.234841Z", "completed_at": "2024-08-12T22:21:09.234844Z"}], "thread_id": "Thread-2", "execution_time": 0.015321016311645508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__customer_details_customer_id.598dec46b9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"zz_recharge_recharge\".\"recharge__customer_details\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.230221Z", "completed_at": "2024-08-12T22:21:09.234357Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.235218Z", "completed_at": "2024-08-12T22:21:09.235221Z"}], "thread_id": "Thread-1", "execution_time": 0.015300989151000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.unique_recharge__customer_details_customer_id.bc46ecdbae", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_recharge_recharge\".\"recharge__customer_details\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.235798Z", "completed_at": "2024-08-12T22:21:09.308122Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.308332Z", "completed_at": "2024-08-12T22:21:09.308336Z"}], "thread_id": "Thread-8", "execution_time": 0.07385110855102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__customer_daily_rollup", "compiled": true, "compiled_code": "with  __dbt__cte__int_recharge__customer_daily_rollup as (\nwith calendar as (\n    select *\n    from \"postgres\".\"zz_recharge_recharge\".\"int_recharge__calendar_spine\"\n\n), customers as (\n    select \n        customer_id, \n        customer_created_at\n    from \"postgres\".\"zz_recharge_recharge\".\"recharge__customer_details\"\n\n), customers_dates as (\n    select \n        customers.customer_id,\n        calendar.date_day,\n        cast(date_trunc('week', calendar.date_day) as date) as date_week,\n        cast(date_trunc('month', calendar.date_day) as date) as date_month,\n        cast(date_trunc('year', calendar.date_day) as date) as date_year\n    from calendar\n    cross join customers\n    where cast(date_trunc('day', customers.customer_created_at) as date) <= calendar.date_day\n)\n\nselect *\nfrom customers_dates\n), spine as (\n    select *\n    from __dbt__cte__int_recharge__customer_daily_rollup\n\n), billing as (\n    select \n        *,\n        case when lower(order_type) = 'recurring' and lower(order_status) not in ('error', 'cancelled', 'queued') \n            then charge_total_price - charge_total_refunds\n            else 0 end as charge_recurring_net_amount,\n        case when lower(order_type) = 'checkout' and lower(order_status) not in ('error', 'cancelled', 'queued')\n            then charge_total_price - charge_total_refunds\n            else 0 end as charge_one_time_net_amount,\n        case when lower(order_type) = 'recurring' and lower(order_status) not in ('error', 'cancelled', 'queued') \n            then calculated_order_total_price - calculated_order_total_refunds\n            else 0 end as calculated_order_recurring_net_amount,\n        case when lower(order_type) = 'checkout' and lower(order_status) not in ('error', 'cancelled', 'queued')\n            then calculated_order_total_price - calculated_order_total_refunds\n            else 0 end as calculated_order_one_time_net_amount\n    from \"postgres\".\"zz_recharge_recharge\".\"recharge__billing_history\"\n\n), customers as (\n    select \n        customer_id,\n        first_charge_processed_at\n    from \"postgres\".\"zz_recharge_recharge\".\"recharge__customer_details\"\n\n), aggs as (\n    select\n        spine.customer_id,\n        spine.date_day,\n        spine.date_week,\n        spine.date_month,\n        spine.date_year,\n        count(billing.order_id) as no_of_orders,\n        count(case when lower(billing.order_type) = 'recurring' then 1 else null end) as recurring_orders,\n        count(case when lower(billing.order_type) = 'checkout' then 1 else null end) as one_time_orders,\n        coalesce(sum(billing.charge_total_price), 0) as total_charges,\n        \n        \n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_price else 0 end) as numeric(28,6)), 2)\n                as charge_total_price_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_discounts else 0 end) as numeric(28,6)), 2)\n                as charge_total_discounts_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_tax else 0 end) as numeric(28,6)), 2)\n                as charge_total_tax_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_refunds else 0 end) as numeric(28,6)), 2)\n                as charge_total_refunds_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_discounts else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_discounts_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_tax else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_tax_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_price else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_price_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_refunds else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_refunds_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.order_line_item_total else 0 end) as numeric(28,6)), 2)\n                as order_line_item_total_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.order_item_quantity else 0 end) as numeric(28,6)), 2)\n                as order_item_quantity_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_recurring_net_amount else 0 end) as numeric(28,6)), 2)\n                as charge_recurring_net_amount_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_one_time_net_amount else 0 end) as numeric(28,6)), 2)\n                as charge_one_time_net_amount_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_recurring_net_amount else 0 end) as numeric(28,6)), 2)\n                as calculated_order_recurring_net_amount_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_one_time_net_amount else 0 end) as numeric(28,6)), 2)\n                as calculated_order_one_time_net_amount_realized\n            \n    from spine\n    left join billing\n        on cast(date_trunc('day', billing.order_processed_at) as date) = spine.date_day\n        and billing.customer_id = spine.customer_id\n    group by 1,2,3,4,5\n\n), aggs_running as (\n    select\n        *,\n        \n            round(cast(sum(charge_total_price_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_price_running_total\n            ,\n            round(cast(sum(charge_total_discounts_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_discounts_running_total\n            ,\n            round(cast(sum(charge_total_tax_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_tax_running_total\n            ,\n            round(cast(sum(charge_total_refunds_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_refunds_running_total\n            ,\n            round(cast(sum(calculated_order_total_discounts_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_discounts_running_total\n            ,\n            round(cast(sum(calculated_order_total_tax_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_tax_running_total\n            ,\n            round(cast(sum(calculated_order_total_price_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_price_running_total\n            ,\n            round(cast(sum(calculated_order_total_refunds_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_refunds_running_total\n            ,\n            round(cast(sum(order_line_item_total_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as order_line_item_total_running_total\n            ,\n            round(cast(sum(order_item_quantity_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as order_item_quantity_running_total\n            ,\n            round(cast(sum(charge_recurring_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_recurring_net_amount_running_total\n            ,\n            round(cast(sum(charge_one_time_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_one_time_net_amount_running_total\n            ,\n            round(cast(sum(calculated_order_recurring_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_recurring_net_amount_running_total\n            ,\n            round(cast(sum(calculated_order_one_time_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_one_time_net_amount_running_total\n            \n    from aggs\n\n), active_months as (\n    select\n        aggs_running.*,\n        round(cast(\n        ((aggs_running.date_day)::date - (customers.first_charge_processed_at)::date)\n     / 30 \n            as numeric(28,6)), 2)\n            as active_months_to_date\n    from aggs_running\n    left join customers\n        on customers.customer_id = aggs_running.customer_id\n)\n\nselect * \nfrom active_months", "relation_name": "\"postgres\".\"zz_recharge_recharge\".\"recharge__customer_daily_rollup\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.309531Z", "completed_at": "2024-08-12T22:21:09.317250Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.317464Z", "completed_at": "2024-08-12T22:21:09.317469Z"}], "thread_id": "Thread-4", "execution_time": 0.008405923843383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__monthly_recurring_revenue", "compiled": true, "compiled_code": "with aggs as (\n    select \n        date_month,\n        customer_id,\n        sum(recurring_orders) as recurring_orders,\n        round(cast(sum(charge_recurring_net_amount_realized) as numeric(28,6)), 2) as total_net_recurring_charges,\n        round(cast(sum(calculated_order_recurring_net_amount_realized) as numeric(28,6)), 2) as calculated_net_order_mrr,\n        sum(one_time_orders) as one_time_orders,\n        round(cast(sum(charge_one_time_net_amount_realized) as numeric(28,6)), 2) as total_net_one_time_charges,\n        round(cast(sum(calculated_order_one_time_net_amount_realized) as numeric(28,6)), 2) as calculated_net_order_one_times\n    from \"postgres\".\"zz_recharge_recharge\".\"recharge__customer_daily_rollup\"\n    group by 1,2\n)\n\nselect *\nfrom aggs", "relation_name": "\"postgres\".\"zz_recharge_recharge\".\"recharge__monthly_recurring_revenue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.313046Z", "completed_at": "2024-08-12T22:21:09.317918Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.318130Z", "completed_at": "2024-08-12T22:21:09.318133Z"}], "thread_id": "Thread-3", "execution_time": 0.00555109977722168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__customer_daily_rollup_customer_id__date_day.6ac34efe6c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, date_day\n    from \"postgres\".\"zz_recharge_recharge\".\"recharge__customer_daily_rollup\"\n    group by customer_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-12T22:21:09.319100Z", "completed_at": "2024-08-12T22:21:09.322254Z"}, {"name": "execute", "started_at": "2024-08-12T22:21:09.322471Z", "completed_at": "2024-08-12T22:21:09.322475Z"}], "thread_id": "Thread-3", "execution_time": 0.0038390159606933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__monthly_recurring_revenue_customer_id__date_month.05cb3c9e75", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, date_month\n    from \"postgres\".\"zz_recharge_recharge\".\"recharge__monthly_recurring_revenue\"\n    group by customer_id, date_month\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 5.197346210479736, "args": {"strict_mode": false, "exclude": [], "indirect_selection": "eager", "send_anonymous_usage_stats": true, "printer_width": 80, "log_format_file": "debug", "profiles_dir": "/Users/catherinefritz/.dbt", "macro_debugging": false, "log_level_file": "debug", "version_check": true, "log_level": "info", "show_resource_report": false, "which": "generate", "introspect": true, "static": false, "vars": {}, "compile": true, "partial_parse_file_diff": true, "use_colors": true, "print": true, "log_file_max_bytes": 10485760, "partial_parse": true, "enable_legacy_logger": false, "invocation_command": "dbt docs generate", "warn_error_options": {"include": [], "exclude": []}, "select": [], "populate_cache": true, "project_dir": "/Users/catherinefritz/Documents/dbt_packages/recharge/dbt_recharge/integration_tests", "cache_selected_only": false, "log_path": "/Users/catherinefritz/Documents/dbt_packages/recharge/dbt_recharge/integration_tests/logs", "write_json": true, "defer": false, "empty_catalog": false, "log_format": "default", "use_colors_file": true, "favor_state": false, "require_resource_names_without_spaces": false, "require_explicit_package_overrides_for_builtin_materializations": true, "quiet": false, "source_freshness_run_project_hooks": false, "static_parser": true}}