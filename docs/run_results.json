{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.2", "generated_at": "2024-06-20T17:29:08.485697Z", "invocation_id": "c7c7de67-7932-4592-acec-f2fe9e5bae8b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.707787Z", "completed_at": "2024-06-20T17:29:04.723443Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.726796Z", "completed_at": "2024-06-20T17:29:04.726804Z"}], "thread_id": "Thread-2", "execution_time": 0.03687024116516113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_discounts_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"address_discounts_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_discounts_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.711320Z", "completed_at": "2024-06-20T17:29:04.725856Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.727685Z", "completed_at": "2024-06-20T17:29:04.727689Z"}], "thread_id": "Thread-3", "execution_time": 0.03639793395996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_shipping_line_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"address_shipping_line_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.713703Z", "completed_at": "2024-06-20T17:29:04.726204Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.728076Z", "completed_at": "2024-06-20T17:29:04.728079Z"}], "thread_id": "Thread-4", "execution_time": 0.03630995750427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"address_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.721047Z", "completed_at": "2024-06-20T17:29:04.726574Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.728463Z", "completed_at": "2024-06-20T17:29:04.728466Z"}], "thread_id": "Thread-7", "execution_time": 0.022819042205810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_order_attribute_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"charge_order_attribute_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_order_attribute_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.715909Z", "completed_at": "2024-06-20T17:29:04.727205Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.729307Z", "completed_at": "2024-06-20T17:29:04.729310Z"}], "thread_id": "Thread-5", "execution_time": 0.03700900077819824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_discount_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"charge_discount_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_discount_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.718125Z", "completed_at": "2024-06-20T17:29:04.727443Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.729693Z", "completed_at": "2024-06-20T17:29:04.729696Z"}], "thread_id": "Thread-6", "execution_time": 0.03710532188415527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_line_item_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"charge_line_item_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_line_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.723649Z", "completed_at": "2024-06-20T17:29:04.729046Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.731138Z", "completed_at": "2024-06-20T17:29:04.731141Z"}], "thread_id": "Thread-8", "execution_time": 0.023921966552734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_shipping_line_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"charge_shipping_line_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_shipping_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.734123Z", "completed_at": "2024-06-20T17:29:04.748976Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.754214Z", "completed_at": "2024-06-20T17:29:04.754220Z"}], "thread_id": "Thread-2", "execution_time": 0.023419857025146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_tax_line_tmp", "compiled": true, "compiled_code": "\nselect *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"charge_tax_line_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_tax_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.739520Z", "completed_at": "2024-06-20T17:29:04.753515Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.754867Z", "completed_at": "2024-06-20T17:29:04.754871Z"}], "thread_id": "Thread-4", "execution_time": 0.022669076919555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__customer_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"customer_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.742218Z", "completed_at": "2024-06-20T17:29:04.753769Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.755446Z", "completed_at": "2024-06-20T17:29:04.755449Z"}], "thread_id": "Thread-7", "execution_time": 0.02303004264831543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__discount_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"discount_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__discount_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.737397Z", "completed_at": "2024-06-20T17:29:04.754008Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.755803Z", "completed_at": "2024-06-20T17:29:04.755806Z"}], "thread_id": "Thread-3", "execution_time": 0.023845911026000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"charge_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.744491Z", "completed_at": "2024-06-20T17:29:04.754597Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.756654Z", "completed_at": "2024-06-20T17:29:04.756657Z"}], "thread_id": "Thread-5", "execution_time": 0.023567914962768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__one_time_product_tmp", "compiled": true, "compiled_code": "\nselect *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"one_time_product_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__one_time_product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.746828Z", "completed_at": "2024-06-20T17:29:04.755223Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.757282Z", "completed_at": "2024-06-20T17:29:04.757284Z"}], "thread_id": "Thread-6", "execution_time": 0.023980140686035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order_line_item_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"order_line_item_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order_line_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.749291Z", "completed_at": "2024-06-20T17:29:04.756179Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.758181Z", "completed_at": "2024-06-20T17:29:04.758184Z"}], "thread_id": "Thread-8", "execution_time": 0.021467208862304688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order_tmp", "compiled": true, "compiled_code": "select *\nfrom\n\"postgres\".\"zz_dbt_catherine_re\".\"orders_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.767775Z", "completed_at": "2024-06-20T17:29:04.769067Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.774743Z", "completed_at": "2024-06-20T17:29:04.774753Z"}], "thread_id": "Thread-7", "execution_time": 0.015310049057006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.769324Z", "completed_at": "2024-06-20T17:29:04.770539Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.775548Z", "completed_at": "2024-06-20T17:29:04.775553Z"}], "thread_id": "Thread-3", "execution_time": 0.015871047973632812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.address_discounts_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.771087Z", "completed_at": "2024-06-20T17:29:04.772488Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.778237Z", "completed_at": "2024-06-20T17:29:04.778242Z"}], "thread_id": "Thread-5", "execution_time": 0.017886877059936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.address_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.773043Z", "completed_at": "2024-06-20T17:29:04.774364Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.778655Z", "completed_at": "2024-06-20T17:29:04.778659Z"}], "thread_id": "Thread-6", "execution_time": 0.017900705337524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.761694Z", "completed_at": "2024-06-20T17:29:04.775246Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.779798Z", "completed_at": "2024-06-20T17:29:04.779805Z"}], "thread_id": "Thread-2", "execution_time": 0.02132105827331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"subscription_history_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.775972Z", "completed_at": "2024-06-20T17:29:04.777965Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.780598Z", "completed_at": "2024-06-20T17:29:04.780604Z"}], "thread_id": "Thread-8", "execution_time": 0.01920485496520996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_discount_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.765054Z", "completed_at": "2024-06-20T17:29:04.779136Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.781771Z", "completed_at": "2024-06-20T17:29:04.781776Z"}], "thread_id": "Thread-4", "execution_time": 0.022770166397094727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"zz_dbt_catherine_re\".\"subscription_data\"", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.785816Z", "completed_at": "2024-06-20T17:29:04.787299Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.793140Z", "completed_at": "2024-06-20T17:29:04.793149Z"}], "thread_id": "Thread-7", "execution_time": 0.011063098907470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.787901Z", "completed_at": "2024-06-20T17:29:04.789304Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.795699Z", "completed_at": "2024-06-20T17:29:04.795703Z"}], "thread_id": "Thread-3", "execution_time": 0.012979745864868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_order_attribute_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.789806Z", "completed_at": "2024-06-20T17:29:04.791178Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.797451Z", "completed_at": "2024-06-20T17:29:04.797455Z"}], "thread_id": "Thread-5", "execution_time": 0.01419687271118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_shipping_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.791496Z", "completed_at": "2024-06-20T17:29:04.792690Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.797798Z", "completed_at": "2024-06-20T17:29:04.797801Z"}], "thread_id": "Thread-6", "execution_time": 0.014291048049926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.charge_tax_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.793574Z", "completed_at": "2024-06-20T17:29:04.795470Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.799741Z", "completed_at": "2024-06-20T17:29:04.799744Z"}], "thread_id": "Thread-2", "execution_time": 0.01554107666015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.796087Z", "completed_at": "2024-06-20T17:29:04.797245Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.800374Z", "completed_at": "2024-06-20T17:29:04.800377Z"}], "thread_id": "Thread-8", "execution_time": 0.015677928924560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.discount_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.798143Z", "completed_at": "2024-06-20T17:29:04.799306Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.801172Z", "completed_at": "2024-06-20T17:29:04.801175Z"}], "thread_id": "Thread-4", "execution_time": 0.015682697296142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.one_time_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.804476Z", "completed_at": "2024-06-20T17:29:04.805820Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.812542Z", "completed_at": "2024-06-20T17:29:04.812548Z"}], "thread_id": "Thread-7", "execution_time": 0.011130809783935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.806515Z", "completed_at": "2024-06-20T17:29:04.808013Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.814298Z", "completed_at": "2024-06-20T17:29:04.814301Z"}], "thread_id": "Thread-3", "execution_time": 0.012400150299072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.order_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.808619Z", "completed_at": "2024-06-20T17:29:04.809977Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.824728Z", "completed_at": "2024-06-20T17:29:04.824733Z"}], "thread_id": "Thread-5", "execution_time": 0.02238321304321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.orders_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.810230Z", "completed_at": "2024-06-20T17:29:04.812118Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.825104Z", "completed_at": "2024-06-20T17:29:04.825107Z"}], "thread_id": "Thread-6", "execution_time": 0.022510766983032227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.subscription_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.812942Z", "completed_at": "2024-06-20T17:29:04.814081Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:04.829926Z", "completed_at": "2024-06-20T17:29:04.829931Z"}], "thread_id": "Thread-2", "execution_time": 0.026703834533691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.recharge_integration_tests.subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.814650Z", "completed_at": "2024-06-20T17:29:05.597317Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:05.597707Z", "completed_at": "2024-06-20T17:29:05.597724Z"}], "thread_id": "Thread-8", "execution_time": 0.9135000705718994, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_discounts", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_discounts_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_id,\n        address_id,\n        index\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_discounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.878935Z", "completed_at": "2024-06-20T17:29:05.896535Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:05.897078Z", "completed_at": "2024-06-20T17:29:05.897083Z"}], "thread_id": "Thread-2", "execution_time": 1.1787829399108887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_shipping_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        price,\n        code,\n        title\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.825443Z", "completed_at": "2024-06-20T17:29:05.895069Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:05.895899Z", "completed_at": "2024-06-20T17:29:05.895908Z"}], "thread_id": "Thread-4", "execution_time": 1.2119176387786865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address_shipping_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_shipping_line_tmp\"\n),\n\nfields as (\n    \n    select\n        \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        address_id,\n        index,\n        price,\n        code,\n        title\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_shipping_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.842212Z", "completed_at": "2024-06-20T17:29:05.896782Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:05.897381Z", "completed_at": "2024-06-20T17:29:05.897384Z"}], "thread_id": "Thread-5", "execution_time": 1.1939830780029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_discount", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_discount_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    value_type\n    \n as \n    \n    value_type\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        id as discount_id, \n        code,\n        cast(value as float) as discount_value,\n        value_type\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_discount\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.874721Z", "completed_at": "2024-06-20T17:29:05.895486Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:05.896270Z", "completed_at": "2024-06-20T17:29:05.896274Z"}], "thread_id": "Thread-6", "execution_time": 1.1946849822998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_line_item", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_line_item_tmp\"\n),\n\nfields as (\n    \n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    tax_due\n    \n as \n    \n    tax_due\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    taxable_amount\n    \n as \n    \n    taxable_amount\n    \n, \n    \n    \n    unit_price_includes_tax\n    \n as \n    \n    unit_price_includes_tax\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    vendor\n    \n as \n    \n    vendor\n    \n, \n    \n    \n    purchase_item_id\n    \n as \n    \n    purchase_item_id\n    \n, \n    \n    \n    purchase_item_type\n    \n as \n    \n    purchase_item_type\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        charge_id,\n        index,\n        vendor,\n        title,\n        variant_title,\n        sku,\n        grams,\n        quantity,\n        cast(total_price as float) as total_price,\n        unit_price,\n        tax_due,\n        taxable,\n        taxable_amount,\n        unit_price_includes_tax,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        purchase_item_id,\n        purchase_item_type\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.834051Z", "completed_at": "2024-06-20T17:29:06.028133Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:06.030252Z", "completed_at": "2024-06-20T17:29:06.030256Z"}], "thread_id": "Thread-7", "execution_time": 1.3175530433654785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__address", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    province\n    \n as \n    \n    province\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    zip\n    \n as \n    \n    zip\n    \n, \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as address_id,\n        customer_id,\n        first_name,\n        last_name,\n        cast(created_at as timestamp) as address_created_at,\n        cast(updated_at as timestamp) as address_updated_at,\n        address_1 as address_line_1,\n        address_2 as address_line_2,\n        city,\n        province,\n        zip,\n        country_code,\n        company,\n        phone\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.693088Z", "completed_at": "2024-06-20T17:29:06.029646Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:06.031561Z", "completed_at": "2024-06-20T17:29:06.031564Z"}], "thread_id": "Thread-1", "execution_time": 1.4604601860046387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.int_recharge__calendar_spine", "compiled": true, "compiled_code": "with spine as (\n    \n    \n    \n        \n            \n            \n            \n        \n\n    \n    \n\n    \n    \n    \n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 61\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2022-09-08'as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-11-08'as date)\n\n)\n\nselect * from filtered\n\n\n)\n\nselect *\nfrom spine", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge\".\"int_recharge__calendar_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:04.838572Z", "completed_at": "2024-06-20T17:29:06.028367Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:06.030512Z", "completed_at": "2024-06-20T17:29:06.030515Z"}], "thread_id": "Thread-3", "execution_time": 1.318302869796753, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_order_attribute", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_order_attribute_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    order_attribute\n    \n as \n    \n    order_attribute\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        order_attribute\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_order_attribute\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:05.725081Z", "completed_at": "2024-06-20T17:29:06.720814Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:06.721398Z", "completed_at": "2024-06-20T17:29:06.721423Z"}], "thread_id": "Thread-8", "execution_time": 1.087332010269165, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge_tax_line", "compiled": true, "compiled_code": "\nwith base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_tax_line_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    rate\n    \n as \n    \n    rate\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        charge_id,\n        index,\n        price,\n        rate,\n        title\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_tax_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:06.153980Z", "completed_at": "2024-06-20T17:29:07.209594Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.209890Z", "completed_at": "2024-06-20T17:29:07.209894Z"}], "thread_id": "Thread-7", "execution_time": 1.1283020973205566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order_line_item", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order_line_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    order_id\n    \n as \n    \n    order_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    grams\n    \n as \n    \n    grams\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    tax_due\n    \n as \n    \n    tax_due\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    taxable_amount\n    \n as \n    \n    taxable_amount\n    \n, \n    \n    \n    unit_price_includes_tax\n    \n as \n    \n    unit_price_includes_tax\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    purchase_item_id\n    \n as \n    \n    purchase_item_id\n    \n, \n    \n    \n    purchase_item_type\n    \n as \n    \n    purchase_item_type\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        order_id,\n        index,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        title as order_line_item_title,\n        variant_title as product_variant_title,\n        sku,\n        quantity,\n        grams,\n        cast(total_price as float) as total_price,\n        unit_price,\n        tax_due,\n        taxable,\n        taxable_amount,\n        unit_price_includes_tax,\n        purchase_item_id,\n        purchase_item_type\n\n        \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:06.048504Z", "completed_at": "2024-06-20T17:29:07.210178Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.210455Z", "completed_at": "2024-06-20T17:29:07.210459Z"}], "thread_id": "Thread-6", "execution_time": 1.2530477046966553, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__one_time_product", "compiled": true, "compiled_code": "\nwith base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__one_time_product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    next_charge_scheduled_at\n    \n as \n    \n    next_charge_scheduled_at\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as one_time_product_id,\n        address_id,\n        customer_id,\n        is_deleted,\n        cast(created_at as timestamp) as one_time_created_at,\n        cast(updated_at as timestamp) as one_time_updated_at,\n        next_charge_scheduled_at as one_time_next_charge_scheduled_at,\n        product_title,\n        variant_title,\n        price,\n        quantity,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        sku\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__one_time_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:06.031816Z", "completed_at": "2024-06-20T17:29:07.209001Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.209315Z", "completed_at": "2024-06-20T17:29:07.209322Z"}], "thread_id": "Thread-2", "execution_time": 1.2569479942321777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__customer", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__customer_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    external_customer_id_ecommerce\n    \n as \n    \n    external_customer_id_ecommerce\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    first_charge_processed_at\n    \n as \n    \n    first_charge_processed_at\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    subscriptions_active_count\n    \n as \n    \n    subscriptions_active_count\n    \n, \n    \n    \n    subscriptions_total_count\n    \n as \n    \n    subscriptions_total_count\n    \n, \n    \n    \n    has_valid_payment_method\n    \n as \n    \n    has_valid_payment_method\n    \n, \n    \n    \n    has_payment_method_in_dunning\n    \n as \n    \n    has_payment_method_in_dunning\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    hash\n    \n as customer_hash \n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as customer_id,\n        customer_hash,\n        external_customer_id_ecommerce,\n        email,\n        first_name,\n        last_name,\n        cast(created_at as timestamp) as customer_created_at,\n        cast(updated_at as timestamp) as customer_updated_at,\n        cast(first_charge_processed_at as timestamp) as first_charge_processed_at,\n        subscriptions_active_count,\n        subscriptions_total_count,\n        has_valid_payment_method,\n        has_payment_method_in_dunning,\n        tax_exempt\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.315764Z", "completed_at": "2024-06-20T17:29:07.323967Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.324190Z", "completed_at": "2024-06-20T17:29:07.324195Z"}], "thread_id": "Thread-6", "execution_time": 0.01940608024597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__address_discounts_address_id.7225544f1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_discounts\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.306922Z", "completed_at": "2024-06-20T17:29:07.324783Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.325495Z", "completed_at": "2024-06-20T17:29:07.325498Z"}], "thread_id": "Thread-7", "execution_time": 0.0210721492767334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__address_discounts_address_id__index.636bfd7451", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, index\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_discounts\"\n    group by address_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.320933Z", "completed_at": "2024-06-20T17:29:07.325299Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.326041Z", "completed_at": "2024-06-20T17:29:07.326044Z"}], "thread_id": "Thread-2", "execution_time": 0.020958900451660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__address_shipping_line_address_id__index.ec269cbd74", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, index\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_shipping_line\"\n    group by address_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.326602Z", "completed_at": "2024-06-20T17:29:07.330817Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.336711Z", "completed_at": "2024-06-20T17:29:07.336716Z"}], "thread_id": "Thread-6", "execution_time": 0.011740922927856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_shipping_line_charge_id__index.4b9ff30e99", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_shipping_line\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.333599Z", "completed_at": "2024-06-20T17:29:07.340581Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.340819Z", "completed_at": "2024-06-20T17:29:07.340823Z"}], "thread_id": "Thread-2", "execution_time": 0.01073002815246582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_shipping_line_charge_id.2e2da51e26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_shipping_line\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.331007Z", "completed_at": "2024-06-20T17:29:07.341184Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.341660Z", "completed_at": "2024-06-20T17:29:07.341663Z"}], "thread_id": "Thread-7", "execution_time": 0.011846065521240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__address_shipping_line_address_id.f5fb6034fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address_shipping_line\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.337917Z", "completed_at": "2024-06-20T17:29:07.342011Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.342705Z", "completed_at": "2024-06-20T17:29:07.342708Z"}], "thread_id": "Thread-6", "execution_time": 0.005313873291015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_discount_charge_id__index.87080ff978", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_discount\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.343732Z", "completed_at": "2024-06-20T17:29:07.352250Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.352483Z", "completed_at": "2024-06-20T17:29:07.352487Z"}], "thread_id": "Thread-2", "execution_time": 0.010329008102416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_discount_charge_id.2efab5c017", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_discount\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.346769Z", "completed_at": "2024-06-20T17:29:07.353105Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.353591Z", "completed_at": "2024-06-20T17:29:07.353594Z"}], "thread_id": "Thread-7", "execution_time": 0.010391712188720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_line_item_charge_id__index.cba28984fe", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_line_item\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.349630Z", "completed_at": "2024-06-20T17:29:07.354127Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.357961Z", "completed_at": "2024-06-20T17:29:07.357966Z"}], "thread_id": "Thread-6", "execution_time": 0.01151585578918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_line_item_charge_id.555f3f4938", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_line_item\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.354572Z", "completed_at": "2024-06-20T17:29:07.363286Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.366614Z", "completed_at": "2024-06-20T17:29:07.366619Z"}], "thread_id": "Thread-2", "execution_time": 0.013339042663574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__address_address_id.ffe947d70f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:06.043203Z", "completed_at": "2024-06-20T17:29:07.304209Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.305401Z", "completed_at": "2024-06-20T17:29:07.305405Z"}], "thread_id": "Thread-5", "execution_time": 1.3468070030212402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__charge", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_hash\n    \n as \n    \n    customer_hash\n    \n, \n    \n    \n    note\n    \n as \n    \n    note\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    scheduled_at\n    \n as \n    \n    scheduled_at\n    \n, \n    \n    \n    orders_count\n    \n as \n    \n    orders_count\n    \n, \n    \n    \n    external_order_id_ecommerce\n    \n as \n    \n    external_order_id_ecommerce\n    \n, \n    \n    \n    subtotal_price\n    \n as \n    \n    subtotal_price\n    \n, \n    \n    \n    tags\n    \n as \n    \n    tags\n    \n, \n    \n    \n    tax_lines\n    \n as \n    \n    tax_lines\n    \n, \n    \n    \n    total_discounts\n    \n as \n    \n    total_discounts\n    \n, \n    \n    \n    total_line_items_price\n    \n as \n    \n    total_line_items_price\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    total_weight_grams\n    \n as \n    \n    total_weight_grams\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    total_refunds\n    \n as \n    \n    total_refunds\n    \n, \n    \n    \n    external_transaction_id_payment_processor\n    \n as \n    \n    external_transaction_id_payment_processor\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    payment_processor\n    \n as \n    \n    payment_processor\n    \n, \n    cast(null as boolean) as \n    \n    has_uncommitted_changes\n    \n , \n    \n    \n    retry_date\n    \n as \n    \n    retry_date\n    \n, \n    \n    \n    error_type\n    \n as \n    \n    error_type\n    \n, \n    \n    \n    error\n    \n as \n    \n    error\n    \n, \n    \n    \n    charge_attempts\n    \n as \n    \n    charge_attempts\n    \n, \n    \n    \n    external_variant_id_not_found\n    \n as \n    \n    external_variant_id_not_found\n    \n, \n    \n    \n    client_details_browser_ip\n    \n as \n    \n    client_details_browser_ip\n    \n, \n    \n    \n    client_details_user_agent\n    \n as \n    \n    client_details_user_agent\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as charge_id,\n        customer_id,\n        customer_hash,\n        email,\n        cast(created_at as timestamp) as charge_created_at,\n        type as charge_type,\n        status as charge_status,\n        cast(updated_at as timestamp) as charge_updated_at,\n        note,\n        subtotal_price,\n        tax_lines,\n        total_discounts,\n        total_line_items_price,\n        total_tax,\n        cast(total_price as float) as total_price,\n        total_refunds,\n        total_weight_grams,\n        cast(scheduled_at as timestamp) as charge_scheduled_at,\n        cast(processed_at as timestamp) as charge_processed_at,\n        payment_processor,\n        external_transaction_id_payment_processor,\n        external_order_id_ecommerce,\n        orders_count,\n        has_uncommitted_changes,\n        cast(retry_date as timestamp) as retry_date,\n        error_type,\n        charge_attempts as times_retried,\n        address_id,\n        client_details_browser_ip,\n        client_details_user_agent,\n        tags,\n        error,\n        external_variant_id_not_found\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.359304Z", "completed_at": "2024-06-20T17:29:07.377899Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.379037Z", "completed_at": "2024-06-20T17:29:07.379041Z"}], "thread_id": "Thread-7", "execution_time": 0.020771026611328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__address_address_id.3ea4d98333", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    address_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__address\"\nwhere address_id is not null\ngroup by address_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.363942Z", "completed_at": "2024-06-20T17:29:07.378471Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.379850Z", "completed_at": "2024-06-20T17:29:07.379853Z"}], "thread_id": "Thread-6", "execution_time": 0.020824670791625977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_order_attribute_charge_id__index.e3dda1974f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_order_attribute\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:06.037365Z", "completed_at": "2024-06-20T17:29:07.306060Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.315534Z", "completed_at": "2024-06-20T17:29:07.315539Z"}], "thread_id": "Thread-4", "execution_time": 1.3655900955200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__discount", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__discount_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    starts_at\n    \n as \n    \n    starts_at\n    \n, \n    \n    \n    ends_at\n    \n as \n    \n    ends_at\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    usage_limits\n    \n as \n    \n    usage_limits\n    \n, \n    \n    \n    applies_to\n    \n as \n    \n    applies_to\n    \n, \n    \n    \n    applies_to_resource\n    \n as \n    \n    applies_to_resource\n    \n, \n    \n    \n    applies_to_id\n    \n as \n    \n    applies_to_id\n    \n, \n    \n    \n    applies_to_product_type\n    \n as \n    \n    applies_to_product_type\n    \n, \n    \n    \n    minimum_order_amount\n    \n as \n    \n    minimum_order_amount\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as discount_id,\n        cast(created_at as timestamp) as discount_created_at,\n        cast(updated_at as timestamp) as discount_updated_at,\n        cast(starts_at as timestamp) as discount_starts_at,\n        cast(ends_at as timestamp) as discount_ends_at,\n        code,\n        value,\n        status,\n        usage_limits,\n        applies_to,\n        applies_to_resource,\n        applies_to_id,\n        applies_to_product_type,\n        minimum_order_amount\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__discount\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:06.160463Z", "completed_at": "2024-06-20T17:29:07.305644Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.306703Z", "completed_at": "2024-06-20T17:29:07.306706Z"}], "thread_id": "Thread-1", "execution_time": 1.2424590587615967, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__order", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    transaction_id\n    \n as \n    \n    transaction_id\n    \n, \n    \n    \n    charge_status\n    \n as \n    \n    charge_status\n    \n, \n    \n    \n    is_prepaid\n    \n as \n    \n    is_prepaid\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    external_order_id_ecommerce\n    \n as \n    \n    external_order_id_ecommerce\n    \n, \n    \n    \n    external_order_number_ecommerce\n    \n as \n    \n    external_order_number_ecommerce\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    processed_at\n    \n as \n    \n    processed_at\n    \n, \n    \n    \n    scheduled_at\n    \n as \n    \n    scheduled_at\n    \n, \n    \n    \n    shipped_date\n    \n as \n    \n    shipped_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as order_id,\n        external_order_id_ecommerce,\n        external_order_number_ecommerce,\n        customer_id,\n        email,\n        cast(created_at as timestamp) as order_created_at,\n        status as order_status,\n        cast(updated_at as timestamp) as order_updated_at,\n        charge_id,\n        transaction_id,\n        charge_status,\n        is_prepaid,\n        cast(total_price as float) as order_total_price,\n        type as order_type,\n        cast(processed_at as timestamp) as order_processed_at,\n        cast(scheduled_at as timestamp) as order_scheduled_at,\n        cast(shipped_date as timestamp) as order_shipped_date,\n        address_id,\n        is_deleted\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.381737Z", "completed_at": "2024-06-20T17:29:07.394261Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.395511Z", "completed_at": "2024-06-20T17:29:07.395515Z"}], "thread_id": "Thread-2", "execution_time": 0.015956878662109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_order_attribute_charge_id.8419846588", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_order_attribute\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.384615Z", "completed_at": "2024-06-20T17:29:07.395209Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.396964Z", "completed_at": "2024-06-20T17:29:07.396966Z"}], "thread_id": "Thread-5", "execution_time": 0.016824960708618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__charge_tax_line_charge_id__index.9fc228fecf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, index\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_tax_line\"\n    group by charge_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.391346Z", "completed_at": "2024-06-20T17:29:07.396517Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.398025Z", "completed_at": "2024-06-20T17:29:07.398028Z"}], "thread_id": "Thread-6", "execution_time": 0.013787984848022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__order_line_item_order_id__index.e56621b39a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        order_id, index\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order_line_item\"\n    group by order_id, index\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.388687Z", "completed_at": "2024-06-20T17:29:07.396766Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.398451Z", "completed_at": "2024-06-20T17:29:07.398454Z"}], "thread_id": "Thread-7", "execution_time": 0.01699995994567871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_tax_line_charge_id.f25f6cb759", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_tax_line\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.403158Z", "completed_at": "2024-06-20T17:29:07.449457Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.459740Z", "completed_at": "2024-06-20T17:29:07.459746Z"}], "thread_id": "Thread-1", "execution_time": 0.06200981140136719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__customer_customer_id.0f267f14ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.400536Z", "completed_at": "2024-06-20T17:29:07.449654Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.460184Z", "completed_at": "2024-06-20T17:29:07.460188Z"}], "thread_id": "Thread-4", "execution_time": 0.0626680850982666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__order_line_item_order_id.bf548aca5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order_line_item\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.406356Z", "completed_at": "2024-06-20T17:29:07.458684Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.460623Z", "completed_at": "2024-06-20T17:29:07.460627Z"}], "thread_id": "Thread-2", "execution_time": 0.0616459846496582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__one_time_product_one_time_product_id.03a2a12d7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect one_time_product_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__one_time_product\"\nwhere one_time_product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.446916Z", "completed_at": "2024-06-20T17:29:07.461011Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.462409Z", "completed_at": "2024-06-20T17:29:07.462412Z"}], "thread_id": "Thread-5", "execution_time": 0.06235313415527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__customer_customer_id.1dcf3f6410", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__customer\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.449832Z", "completed_at": "2024-06-20T17:29:07.461504Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.462988Z", "completed_at": "2024-06-20T17:29:07.462991Z"}], "thread_id": "Thread-6", "execution_time": 0.05735301971435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__one_time_product_one_time_product_id.8ccb87ed5b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    one_time_product_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__one_time_product\"\nwhere one_time_product_id is not null\ngroup by one_time_product_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.452388Z", "completed_at": "2024-06-20T17:29:07.462216Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.463731Z", "completed_at": "2024-06-20T17:29:07.463734Z"}], "thread_id": "Thread-7", "execution_time": 0.05784916877746582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__charge_line_item_history", "compiled": true, "compiled_code": "with charges as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge\"\n\n), charge_line_items as (\n    select \n        charge_id,\n        index,\n        cast(total_price as float) as amount,\n        title,\n        'charge line' as line_item_type\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_line_item\"\n\n), charge_discounts as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_discount\"\n\n), discounts_enriched as (\n    select\n        charge_discounts.charge_id,\n        charge_discounts.index,\n        cast(case when lower(charge_discounts.value_type) = 'percentage'\n            then round(cast(charge_discounts.discount_value / 100 * charges.total_line_items_price as numeric(28,6)), 2)\n            else charge_discounts.discount_value \n            end as float) as amount,\n        charge_discounts.code as title,\n        'discount' as line_item_type\n    from charge_discounts\n    left join charges\n        on charges.charge_id = charge_discounts.charge_id\n\n), charge_shipping_lines as (\n    select \n        charge_id,\n        index,\n        cast(price as float) as amount,\n        title,\n        'shipping' as line_item_type\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_shipping_line\"\n\n), charge_tax_lines as (\n    \n        select \n            charge_id,\n            index,\n            cast(price as float) as amount,\n            title,\n            'tax' as line_item_type\n        from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_tax_line\" -- use this if possible since it is individual tax items\n    \n\n), refunds as (\n    select\n        charge_id,\n        0 as index,\n        cast(total_refunds as float) as amount,\n        'total refunds' as title,\n        'refund' as line_item_type\n    from charges -- have to extract refunds from charges table since a refund line item table is not available\n    where total_refunds > 0\n\n), unioned as (\n\n    select *\n    from charge_line_items\n\n    union all\n    select *\n    from discounts_enriched\n\n    union all\n    select *\n    from charge_shipping_lines\n\n    union all\n    select *\n    from charge_tax_lines\n    \n    union all\n    select *\n    from refunds\n\n), joined as (\n    select\n        unioned.charge_id,\n        row_number() over(partition by unioned.charge_id \n            order by unioned.line_item_type, unioned.index) \n            as charge_row_num,\n        unioned.index as source_index,\n        charges.charge_created_at,\n        charges.customer_id,\n        charges.address_id,\n        unioned.amount,\n        unioned.title,\n        unioned.line_item_type\n    from unioned\n    left join charges\n        on charges.charge_id = unioned.charge_id\n)\n\nselect *\nfrom joined", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__charge_line_item_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.465603Z", "completed_at": "2024-06-20T17:29:07.475323Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.488988Z", "completed_at": "2024-06-20T17:29:07.488993Z"}], "thread_id": "Thread-1", "execution_time": 0.026291847229003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__charge_charge_id.e40d1f4998", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.468467Z", "completed_at": "2024-06-20T17:29:07.475511Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.489357Z", "completed_at": "2024-06-20T17:29:07.489360Z"}], "thread_id": "Thread-4", "execution_time": 0.02609729766845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__charge_charge_id.a013ccef10", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge\"\nwhere charge_id is not null\ngroup by charge_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.471717Z", "completed_at": "2024-06-20T17:29:07.484571Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.489732Z", "completed_at": "2024-06-20T17:29:07.489736Z"}], "thread_id": "Thread-2", "execution_time": 0.02626490592956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__discount_discount_id.71ea1251b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect discount_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__discount\"\nwhere discount_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.475710Z", "completed_at": "2024-06-20T17:29:07.490701Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.491850Z", "completed_at": "2024-06-20T17:29:07.491853Z"}], "thread_id": "Thread-5", "execution_time": 0.026533126831054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__discount_discount_id.5e928f569c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    discount_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__discount\"\nwhere discount_id is not null\ngroup by discount_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.485768Z", "completed_at": "2024-06-20T17:29:07.490889Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.492373Z", "completed_at": "2024-06-20T17:29:07.492377Z"}], "thread_id": "Thread-7", "execution_time": 0.018178939819335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__order_order_id.70fc03aaa7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.478312Z", "completed_at": "2024-06-20T17:29:07.492176Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.493367Z", "completed_at": "2024-06-20T17:29:07.493373Z"}], "thread_id": "Thread-6", "execution_time": 0.025196075439453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__billing_history", "compiled": true, "compiled_code": "with orders as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order\"\n\n), order_line_items as (\n    select \n        order_id,\n        sum(quantity) as order_item_quantity,\n        round(cast(sum(total_price) as numeric(28,6)), 2) as order_line_item_total\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order_line_item\"\n    group by 1\n\n\n), charges as ( --each charge can have multiple orders associated with it\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge\"\n\n), charge_shipping_lines as (\n    select \n        charge_id,\n        round(cast(sum(price) as numeric(28,6)), 2) as total_shipping\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_shipping_line\"\n    group by 1\n\n), charges_enriched as (\n    select\n        charges.*,\n        charge_shipping_lines.total_shipping\n    from charges\n    left join charge_shipping_lines\n        on charge_shipping_lines.charge_id = charges.charge_id\n\n), joined as (\n    select \n        orders.*,\n        -- recognized_total (calculated total based on prepaid subscriptions)\n        charges_enriched.charge_created_at,\n        charges_enriched.payment_processor,\n        charges_enriched.tags,\n        charges_enriched.orders_count,\n        charges_enriched.charge_type,\n        \n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_price, 0)\n                end as charge_total_price,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_price ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_price,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.subtotal_price, 0)\n                end as charge_subtotal_price,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.subtotal_price ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_subtotal_price,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.tax_lines, 0)\n                end as charge_tax_lines,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.tax_lines ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_tax_lines,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_discounts, 0)\n                end as charge_total_discounts,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_discounts ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_discounts,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_refunds, 0)\n                end as charge_total_refunds,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_refunds ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_refunds,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_tax, 0)\n                end as charge_total_tax,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_tax ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_tax,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_weight_grams, 0)\n                end as charge_total_weight_grams,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_weight_grams ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_weight_grams,\n        \n            -- when several prepaid orders are generated from a single charge, we only want to show total aggregates from the charge on the first instance.\n            case when orders.is_prepaid = true then 0 \n                else coalesce(charges_enriched.total_shipping, 0)\n                end as charge_total_shipping,\n            -- this divides a charge over all the related orders.\n            coalesce(round(cast(\n    ( charges_enriched.total_shipping ) / nullif( ( charges_enriched.orders_count ), 0)\n as numeric(28,6)), 2), 0)\n                as calculated_order_total_shipping,\n        \n        coalesce(order_line_items.order_item_quantity, 0) as order_item_quantity,\n        coalesce(order_line_items.order_line_item_total, 0) as order_line_item_total\n    from orders\n    left join order_line_items\n        on order_line_items.order_id = orders.order_id\n    left join charges_enriched -- still want to capture charges that don't have an order yet\n        on charges_enriched.charge_id = orders.charge_id\n\n), joined_enriched as (\n    select \n        joined.*,\n        -- total_price includes taxes and discounts, so only need to subtract total_refunds to get net.\n        charge_total_price - charge_total_refunds as total_net_charge_value,\n        calculated_order_total_price - calculated_order_total_refunds as total_calculated_net_order_value  \n    from joined\n)\n\nselect * \nfrom joined_enriched", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__billing_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.493961Z", "completed_at": "2024-06-20T17:29:07.503189Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.504029Z", "completed_at": "2024-06-20T17:29:07.504034Z"}], "thread_id": "Thread-1", "execution_time": 0.012729644775390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__order_order_id.bab2588ddd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__order\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.499634Z", "completed_at": "2024-06-20T17:29:07.503834Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.510344Z", "completed_at": "2024-06-20T17:29:07.510348Z"}], "thread_id": "Thread-2", "execution_time": 0.017699003219604492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__charge_line_item_history_charge_id.48a34a867c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__charge_line_item_history\"\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.496562Z", "completed_at": "2024-06-20T17:29:07.504366Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.510761Z", "completed_at": "2024-06-20T17:29:07.510765Z"}], "thread_id": "Thread-4", "execution_time": 0.019209861755371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__charge_line_item_history_charge_id__charge_row_num.1863e6df2f", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, charge_row_num\n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__charge_line_item_history\"\n    group by charge_id, charge_row_num\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.504563Z", "completed_at": "2024-06-20T17:29:07.511367Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.511766Z", "completed_at": "2024-06-20T17:29:07.511768Z"}], "thread_id": "Thread-5", "execution_time": 0.009151935577392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__billing_history_order_id.d9c88b8dff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__billing_history\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.507101Z", "completed_at": "2024-06-20T17:29:07.511567Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.512093Z", "completed_at": "2024-06-20T17:29:07.512096Z"}], "thread_id": "Thread-7", "execution_time": 0.009172916412353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.unique_recharge__billing_history_order_id.05decc3c47", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__billing_history\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:06.166479Z", "completed_at": "2024-06-20T17:29:07.379417Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.380669Z", "completed_at": "2024-06-20T17:29:07.380671Z"}], "thread_id": "Thread-3", "execution_time": 1.363356113433838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription_history", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    next_charge_scheduled_at\n    \n as \n    \n    next_charge_scheduled_at\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    cancellation_reason_comments\n    \n as \n    \n    cancellation_reason_comments\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    order_interval_unit\n    \n as \n    \n    order_interval_unit\n    \n, \n    \n    \n    order_interval_frequency\n    \n as \n    \n    order_interval_frequency\n    \n, \n    \n    \n    charge_interval_frequency\n    \n as \n    \n    charge_interval_frequency\n    \n, \n    \n    \n    order_day_of_week\n    \n as \n    \n    order_day_of_week\n    \n, \n    \n    \n    order_day_of_month\n    \n as \n    \n    order_day_of_month\n    \n, \n    \n    \n    expire_after_specific_number_of_charges\n    \n as \n    \n    expire_after_specific_number_of_charges\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        subscription_id,\n        customer_id,\n        address_id,\n        cast(created_at as timestamp) as subscription_created_at,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        product_title,\n        variant_title,\n        sku,\n        cast(price as float) as price,\n        quantity,\n        status as subscription_status,\n        charge_interval_frequency,\n        order_interval_unit,\n        order_interval_frequency,\n        order_day_of_month,\n        order_day_of_week,\n        expire_after_specific_number_of_charges,\n        cast(updated_at as timestamp) as subscription_updated_at,\n        cast(next_charge_scheduled_at as timestamp) as subscription_next_charge_scheduled_at,\n        cast(cancelled_at as timestamp) as subscription_cancelled_at,\n        cancellation_reason,\n        cancellation_reason_comments,\n        _fivetran_synced,\n        row_number() over (partition by subscription_id order by updated_at desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.521560Z", "completed_at": "2024-06-20T17:29:07.527667Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.527896Z", "completed_at": "2024-06-20T17:29:07.527902Z"}], "thread_id": "Thread-1", "execution_time": 0.010615110397338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.dbt_utils_unique_combination_of_columns_stg_recharge__subscription_history_subscription_id__subscription_updated_at.7eefd56269", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, subscription_updated_at\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription_history\"\n    group by subscription_id, subscription_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.524923Z", "completed_at": "2024-06-20T17:29:07.528306Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.528516Z", "completed_at": "2024-06-20T17:29:07.528519Z"}], "thread_id": "Thread-2", "execution_time": 0.010805845260620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__subscription_history_subscription_id.678aed985c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription_history\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.518181Z", "completed_at": "2024-06-20T17:29:07.528887Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.529085Z", "completed_at": "2024-06-20T17:29:07.529087Z"}], "thread_id": "Thread-6", "execution_time": 0.012199878692626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__subscription_overview", "compiled": true, "compiled_code": "with subscriptions as (\n\n    select * \n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription_history\"\n    where is_most_recent_record\n\n), charges as (\n    select * \n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge\"\n    where lower(charge_type) = 'recurring'\n\n), charge_line_items as (\n    select * \n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__charge_line_item\"\n\n), customers_charge_lines as (\n    select \n        charge_line_items.charge_id,\n        charge_line_items.purchase_item_id,\n        charge_line_items.external_product_id_ecommerce,\n        charge_line_items.external_variant_id_ecommerce,\n        charges.customer_id,\n        charges.address_id,\n        charges.charge_created_at,\n        charges.charge_status\n    from charge_line_items\n    left join charges\n        on charges.charge_id = charge_line_items.charge_id\n\n), subscriptions_charges as (\n    select \n        subscriptions.subscription_id,\n        count(case when lower(customers_charge_lines.charge_status) = 'success' \n            then 1 else null\n            end) as count_successful_charges,\n        count(case when lower(customers_charge_lines.charge_status) = 'queued' \n            then 1 else null\n            end) as count_queued_charges\n    from subscriptions\n    left join customers_charge_lines\n        on customers_charge_lines.purchase_item_id = subscriptions.subscription_id\n    group by 1\n\n), subscriptions_enriched as (\n    select\n        subscriptions.*,\n        subscriptions_charges.count_successful_charges,\n        subscriptions_charges.count_queued_charges,\n        case when subscription_next_charge_scheduled_at is null then null\n            when expire_after_specific_number_of_charges - count_successful_charges < 0 then null\n            else expire_after_specific_number_of_charges - count_successful_charges\n            end as charges_until_expiration,\n        case when lower(order_interval_unit) = 'month' then charge_interval_frequency * 30\n            when lower(order_interval_unit) = 'week' then charge_interval_frequency * 7\n            else charge_interval_frequency \n            end as charge_interval_frequency_days\n    from subscriptions\n    left join subscriptions_charges\n        on subscriptions_charges.subscription_id = subscriptions.subscription_id\n)\n\nselect * \nfrom subscriptions_enriched", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__subscription_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.530109Z", "completed_at": "2024-06-20T17:29:07.536654Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.536873Z", "completed_at": "2024-06-20T17:29:07.536877Z"}], "thread_id": "Thread-5", "execution_time": 0.007227897644042969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__subscription_overview_subscription_id.edad857cc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__subscription_overview\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:07.533301Z", "completed_at": "2024-06-20T17:29:07.537336Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:07.537539Z", "completed_at": "2024-06-20T17:29:07.537542Z"}], "thread_id": "Thread-7", "execution_time": 0.004720926284790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.unique_recharge__subscription_overview_subscription_id.ead71825cd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__subscription_overview\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:06.815070Z", "completed_at": "2024-06-20T17:29:08.000954Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.001352Z", "completed_at": "2024-06-20T17:29:08.001362Z"}], "thread_id": "Thread-8", "execution_time": 1.4977688789367676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge_source.stg_recharge__subscription", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    address_id\n    \n as \n    \n    address_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    cancelled_at\n    \n as \n    \n    cancelled_at\n    \n, \n    \n    \n    next_charge_scheduled_at\n    \n as \n    \n    next_charge_scheduled_at\n    \n, \n    \n    \n    price\n    \n as \n    \n    price\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    cancellation_reason_comments\n    \n as \n    \n    cancellation_reason_comments\n    \n, \n    \n    \n    product_title\n    \n as \n    \n    product_title\n    \n, \n    \n    \n    variant_title\n    \n as \n    \n    variant_title\n    \n, \n    \n    \n    external_product_id_ecommerce\n    \n as \n    \n    external_product_id_ecommerce\n    \n, \n    \n    \n    external_variant_id_ecommerce\n    \n as \n    \n    external_variant_id_ecommerce\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    order_interval_unit\n    \n as \n    \n    order_interval_unit\n    \n, \n    \n    \n    order_interval_frequency\n    \n as \n    \n    order_interval_frequency\n    \n, \n    \n    \n    charge_interval_frequency\n    \n as \n    \n    charge_interval_frequency\n    \n, \n    \n    \n    order_day_of_week\n    \n as \n    \n    order_day_of_week\n    \n, \n    \n    \n    order_day_of_month\n    \n as \n    \n    order_day_of_month\n    \n, \n    \n    \n    expire_after_specific_number_of_charges\n    \n as \n    \n    expire_after_specific_number_of_charges\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        id as subscription_id,\n        customer_id,\n        address_id,\n        cast(created_at as timestamp) as subscription_created_at,\n        product_title,\n        variant_title,\n        sku,\n        cast(price as float) as price,\n        quantity,\n        status as subscription_status,\n        next_charge_scheduled_at as subscription_next_charge_scheduled_at,\n        charge_interval_frequency,\n        expire_after_specific_number_of_charges,\n        order_interval_frequency,\n        order_interval_unit,\n        order_day_of_week,\n        order_day_of_month,\n        cast(updated_at as timestamp) as subscription_updated_at,\n        external_product_id_ecommerce,\n        external_variant_id_ecommerce,\n        cast(cancelled_at as timestamp) as subscription_cancelled_at,\n        cancellation_reason,\n        cancellation_reason_comments\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.328786Z", "completed_at": "2024-06-20T17:29:08.344202Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.345399Z", "completed_at": "2024-06-20T17:29:08.345404Z"}], "thread_id": "Thread-1", "execution_time": 0.026836156845092773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.unique_stg_recharge__subscription_subscription_id.bed39b80ea", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.321116Z", "completed_at": "2024-06-20T17:29:08.344574Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.345942Z", "completed_at": "2024-06-20T17:29:08.345946Z"}], "thread_id": "Thread-4", "execution_time": 0.02893829345703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge_source.not_null_stg_recharge__subscription_subscription_id.c2f0892c32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.347972Z", "completed_at": "2024-06-20T17:29:08.375962Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.376207Z", "completed_at": "2024-06-20T17:29:08.376212Z"}], "thread_id": "Thread-3", "execution_time": 0.02901935577392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__customer_details", "compiled": true, "compiled_code": "with  __dbt__cte__int_recharge__customer_details as (\nwith customers as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__customer\"\n\n), billing as (\n    select * \n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__billing_history\"\n\n-- Agg'd on customer_id\n), order_aggs as ( \n    select \n        customer_id,\n        count(order_id) as total_orders,\n        round(cast(sum(order_total_price) as numeric(28,6)), 2) as total_amount_ordered,\n        round(cast(avg(order_total_price) as numeric(28,6)), 2) as avg_order_amount,\n        round(cast(sum(order_item_quantity) as numeric(28,6)), 2) as total_quantity_ordered,\n        round(cast(avg(order_item_quantity) as numeric(28,6)), 2) as avg_item_quantity_per_order,\n        round(cast(sum(order_line_item_total) as numeric(28,6)), 2) as total_order_line_item_total,\n        round(cast(avg(order_line_item_total) as numeric(28,6)), 2) as avg_order_line_item_total\n    from billing\n    where lower(order_status) not in ('error', 'cancelled', 'queued') --possible values: success, error, queued, skipped, refunded or partially_refunded\n    group by 1\n\n), charge_aggs as (\n    select \n        customer_id,\n        count(distinct charge_id) as charges_count,\n        round(cast(sum(charge_total_price) as numeric(28,6)), 2) as total_amount_charged,\n        round(cast(avg(charge_total_price) as numeric(28,6)), 2) as avg_amount_charged,\n        round(cast(sum(charge_total_tax) as numeric(28,6)), 2) as total_amount_taxed,\n        round(cast(sum(charge_total_discounts) as numeric(28,6)), 2) as total_amount_discounted,\n        round(cast(sum(charge_total_refunds) as numeric(28,6)), 2) as total_refunds,\n        count(case when lower(billing.charge_type) = 'checkout' then 1 else null end) as total_one_time_purchases\n    from billing\n    where lower(charge_status) not in ('error', 'skipped', 'queued')\n    group by 1\n\n), subscriptions as (\n    select \n        customer_id,\n        count(subscription_id) as calculated_subscriptions_active_count -- this value may differ from the recharge-provided subscriptions_active_count. See DECISIONLOG. \n    from \"postgres\".\"zz_dbt_catherine_re_recharge_source\".\"stg_recharge__subscription\"\n    where lower(subscription_status) = 'active'\n    group by 1\n\n), joined as (\n    select \n        customers.*,\n        order_aggs.total_orders,\n        order_aggs.total_amount_ordered,\n        order_aggs.avg_order_amount,\n        order_aggs.total_order_line_item_total,\n        order_aggs.avg_order_line_item_total,\n        order_aggs.avg_item_quantity_per_order, --units_per_transaction\n        charge_aggs.total_amount_charged,\n        charge_aggs.avg_amount_charged,\n        charge_aggs.charges_count,\n        charge_aggs.total_amount_taxed,\n        charge_aggs.total_amount_discounted,\n        charge_aggs.total_refunds,\n        charge_aggs.total_one_time_purchases,\n        round(cast(charge_aggs.avg_amount_charged - charge_aggs.total_refunds as numeric(28,6)), 2) \n            as total_net_spend,\n        coalesce(subscriptions.calculated_subscriptions_active_count, 0) as calculated_subscriptions_active_count\n    from customers\n    left join charge_aggs \n        on charge_aggs.customer_id = customers.customer_id\n    left join order_aggs\n        on order_aggs.customer_id = customers.customer_id\n    left join subscriptions\n        on subscriptions.customer_id = customers.customer_id\n\n)\n\nselect * \nfrom joined\n), customers as (\n    select *\n    from __dbt__cte__int_recharge__customer_details \n\n), enriched as (\n    select \n        customers.*,\n        case when subscriptions_active_count > 0 \n            then true else false end as is_currently_subscribed,\n        case when \n        ((\n    current_timestamp::timestamp\n)::date - (first_charge_processed_at)::date)\n     <= 30\n            then true else false end as is_new_customer,\n        round(cast(\n        ((\n    current_timestamp::timestamp\n)::date - (first_charge_processed_at)::date)\n     / 30 as numeric(28,6)), 2)\n            as active_months\n    from customers\n\n), aggs as (\n    select\n        enriched.*,\n        \n        \n            round(cast(\n    ( total_orders ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as orders_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_ordered ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_ordered_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_one_time_purchases ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as one_time_purchases_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_charged ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_charged_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_discounted ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_discounted_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_amount_taxed ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as amount_taxed_monthly_average -- calculates average over no. active mos\n            ,\n            round(cast(\n    ( total_net_spend ) / nullif( ( active_months ), 0)\n as numeric(28,6)), 2) \n                as net_spend_monthly_average -- calculates average over no. active mos\n            \n    from enriched\n)\n\nselect * \nfrom aggs", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__customer_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.379281Z", "completed_at": "2024-06-20T17:29:08.394318Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.394915Z", "completed_at": "2024-06-20T17:29:08.394918Z"}], "thread_id": "Thread-7", "execution_time": 0.017606019973754883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.recharge.recharge__churn_analysis", "compiled": true, "compiled_code": "with customers as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__customer_details\"\n\n), churn_types as (\n    select \n        customers.*,\n        case when calculated_subscriptions_active_count > 0 and has_valid_payment_method = true\n            then false else true\n            end as is_churned,\n        \n        case when calculated_subscriptions_active_count = 0 and has_valid_payment_method = false\n            then 'passive cancellation'\n        when calculated_subscriptions_active_count = 0 and has_valid_payment_method = true\n            then 'active cancellation'\n        when calculated_subscriptions_active_count > 0 and has_valid_payment_method = false\n            then 'charge error'\n        else cast(null as TEXT)\n        end as churn_type\n    from customers\n)\n\nselect *\nfrom churn_type", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.387310Z", "completed_at": "2024-06-20T17:29:08.395243Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.395905Z", "completed_at": "2024-06-20T17:29:08.395910Z"}], "thread_id": "Thread-6", "execution_time": 0.017393112182617188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.not_null_recharge__customer_details_customer_id.598dec46b9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__customer_details\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.391409Z", "completed_at": "2024-06-20T17:29:08.395457Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.396563Z", "completed_at": "2024-06-20T17:29:08.396566Z"}], "thread_id": "Thread-2", "execution_time": 0.017580032348632812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.unique_recharge__customer_details_customer_id.bc46ecdbae", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__customer_details\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.397434Z", "completed_at": "2024-06-20T17:29:08.469871Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.470090Z", "completed_at": "2024-06-20T17:29:08.470095Z"}], "thread_id": "Thread-4", "execution_time": 0.07321596145629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__customer_daily_rollup", "compiled": true, "compiled_code": "with  __dbt__cte__int_recharge__customer_daily_rollup as (\nwith calendar as (\n    select *\n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"int_recharge__calendar_spine\"\n\n), customers as (\n    select \n        customer_id, \n        customer_created_at\n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__customer_details\"\n\n), customers_dates as (\n    select \n        customers.customer_id,\n        calendar.date_day,\n        cast(date_trunc('week', calendar.date_day) as date) as date_week,\n        cast(date_trunc('month', calendar.date_day) as date) as date_month,\n        cast(date_trunc('year', calendar.date_day) as date) as date_year\n    from calendar\n    cross join customers\n    where cast(date_trunc('day', customers.customer_created_at) as date) <= calendar.date_day\n)\n\nselect *\nfrom customers_dates\n), spine as (\n    select *\n    from __dbt__cte__int_recharge__customer_daily_rollup\n\n), billing as (\n    select \n        *,\n        case when lower(order_type) = 'recurring' and lower(order_status) not in ('error', 'cancelled', 'queued') \n            then charge_total_price - charge_total_refunds\n            else 0 end as charge_recurring_net_amount,\n        case when lower(order_type) = 'checkout' and lower(order_status) not in ('error', 'cancelled', 'queued')\n            then charge_total_price - charge_total_refunds\n            else 0 end as charge_one_time_net_amount,\n        case when lower(order_type) = 'recurring' and lower(order_status) not in ('error', 'cancelled', 'queued') \n            then calculated_order_total_price - calculated_order_total_refunds\n            else 0 end as calculated_order_recurring_net_amount,\n        case when lower(order_type) = 'checkout' and lower(order_status) not in ('error', 'cancelled', 'queued')\n            then calculated_order_total_price - calculated_order_total_refunds\n            else 0 end as calculated_order_one_time_net_amount\n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__billing_history\"\n\n), customers as (\n    select \n        customer_id,\n        first_charge_processed_at\n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__customer_details\"\n\n), aggs as (\n    select\n        spine.customer_id,\n        spine.date_day,\n        spine.date_week,\n        spine.date_month,\n        spine.date_year,\n        count(billing.order_id) as no_of_orders,\n        count(case when lower(billing.order_type) = 'recurring' then 1 else null end) as recurring_orders,\n        count(case when lower(billing.order_type) = 'checkout' then 1 else null end) as one_time_orders,\n        coalesce(sum(billing.charge_total_price), 0) as total_charges,\n        \n        \n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_price else 0 end) as numeric(28,6)), 2)\n                as charge_total_price_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_discounts else 0 end) as numeric(28,6)), 2)\n                as charge_total_discounts_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_tax else 0 end) as numeric(28,6)), 2)\n                as charge_total_tax_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_total_refunds else 0 end) as numeric(28,6)), 2)\n                as charge_total_refunds_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_discounts else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_discounts_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_tax else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_tax_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_price else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_price_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_total_refunds else 0 end) as numeric(28,6)), 2)\n                as calculated_order_total_refunds_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.order_line_item_total else 0 end) as numeric(28,6)), 2)\n                as order_line_item_total_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.order_item_quantity else 0 end) as numeric(28,6)), 2)\n                as order_item_quantity_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_recurring_net_amount else 0 end) as numeric(28,6)), 2)\n                as charge_recurring_net_amount_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.charge_one_time_net_amount else 0 end) as numeric(28,6)), 2)\n                as charge_one_time_net_amount_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_recurring_net_amount else 0 end) as numeric(28,6)), 2)\n                as calculated_order_recurring_net_amount_realized\n            ,\n            round(cast(sum(case when lower(billing.order_status)  not in ('error', 'cancelled', 'queued')\n                then billing.calculated_order_one_time_net_amount else 0 end) as numeric(28,6)), 2)\n                as calculated_order_one_time_net_amount_realized\n            \n    from spine\n    left join billing\n        on cast(date_trunc('day', billing.order_processed_at) as date) = spine.date_day\n        and billing.customer_id = spine.customer_id\n    group by 1,2,3,4,5\n\n), aggs_running as (\n    select\n        *,\n        \n            round(cast(sum(charge_total_price_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_price_running_total\n            ,\n            round(cast(sum(charge_total_discounts_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_discounts_running_total\n            ,\n            round(cast(sum(charge_total_tax_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_tax_running_total\n            ,\n            round(cast(sum(charge_total_refunds_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_total_refunds_running_total\n            ,\n            round(cast(sum(calculated_order_total_discounts_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_discounts_running_total\n            ,\n            round(cast(sum(calculated_order_total_tax_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_tax_running_total\n            ,\n            round(cast(sum(calculated_order_total_price_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_price_running_total\n            ,\n            round(cast(sum(calculated_order_total_refunds_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_total_refunds_running_total\n            ,\n            round(cast(sum(order_line_item_total_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as order_line_item_total_running_total\n            ,\n            round(cast(sum(order_item_quantity_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as order_item_quantity_running_total\n            ,\n            round(cast(sum(charge_recurring_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_recurring_net_amount_running_total\n            ,\n            round(cast(sum(charge_one_time_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as charge_one_time_net_amount_running_total\n            ,\n            round(cast(sum(calculated_order_recurring_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_recurring_net_amount_running_total\n            ,\n            round(cast(sum(calculated_order_one_time_net_amount_realized) over (partition by customer_id order by date_day asc \n                rows unbounded preceding) as numeric(28,6)), 2)\n                as calculated_order_one_time_net_amount_running_total\n            \n    from aggs\n\n), active_months as (\n    select\n        aggs_running.*,\n        round(cast(\n        ((aggs_running.date_day)::date - (customers.first_charge_processed_at)::date)\n     / 30 \n            as numeric(28,6)), 2)\n            as active_months_to_date\n    from aggs_running\n    left join customers\n        on customers.customer_id = aggs_running.customer_id\n)\n\nselect * \nfrom active_months", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__customer_daily_rollup\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.471320Z", "completed_at": "2024-06-20T17:29:08.478261Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.478472Z", "completed_at": "2024-06-20T17:29:08.478477Z"}], "thread_id": "Thread-3", "execution_time": 0.007628917694091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.recharge.recharge__monthly_recurring_revenue", "compiled": true, "compiled_code": "with aggs as (\n    select \n        date_month,\n        customer_id,\n        sum(recurring_orders) as recurring_orders,\n        round(cast(sum(charge_recurring_net_amount_realized) as numeric(28,6)), 2) as total_net_recurring_charges,\n        round(cast(sum(calculated_order_recurring_net_amount_realized) as numeric(28,6)), 2) as calculated_net_order_mrr,\n        sum(one_time_orders) as one_time_orders,\n        round(cast(sum(charge_one_time_net_amount_realized) as numeric(28,6)), 2) as total_net_one_time_charges,\n        round(cast(sum(calculated_order_one_time_net_amount_realized) as numeric(28,6)), 2) as calculated_net_order_one_times\n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__customer_daily_rollup\"\n    group by 1,2\n)\n\nselect *\nfrom aggs", "relation_name": "\"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__monthly_recurring_revenue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.474980Z", "completed_at": "2024-06-20T17:29:08.478906Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.479363Z", "completed_at": "2024-06-20T17:29:08.479366Z"}], "thread_id": "Thread-1", "execution_time": 0.004942178726196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__customer_daily_rollup_customer_id__date_day.6ac34efe6c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, date_day\n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__customer_daily_rollup\"\n    group by customer_id, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-06-20T17:29:08.480207Z", "completed_at": "2024-06-20T17:29:08.483380Z"}, {"name": "execute", "started_at": "2024-06-20T17:29:08.483594Z", "completed_at": "2024-06-20T17:29:08.483598Z"}], "thread_id": "Thread-7", "execution_time": 0.003923892974853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.recharge.dbt_utils_unique_combination_of_columns_recharge__monthly_recurring_revenue_customer_id__date_month.05cb3c9e75", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, date_month\n    from \"postgres\".\"zz_dbt_catherine_re_recharge\".\"recharge__monthly_recurring_revenue\"\n    group by customer_id, date_month\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 7.386214971542358, "args": {"use_colors_file": true, "log_file_max_bytes": 10485760, "version_check": true, "send_anonymous_usage_stats": true, "log_format": "default", "partial_parse": true, "strict_mode": false, "log_path": "/Users/catherinefritz/Documents/dbt_packages/recharge/dbt_recharge/integration_tests/logs", "print": true, "show_resource_report": false, "select": [], "partial_parse_file_diff": true, "enable_legacy_logger": false, "write_json": true, "static_parser": true, "log_level": "info", "project_dir": "/Users/catherinefritz/Documents/dbt_packages/recharge/dbt_recharge/integration_tests", "cache_selected_only": false, "which": "generate", "vars": {}, "populate_cache": true, "defer": false, "use_colors": true, "exclude": [], "favor_state": false, "invocation_command": "dbt docs generate", "printer_width": 80, "static": false, "quiet": false, "introspect": true, "indirect_selection": "eager", "require_resource_names_without_spaces": false, "source_freshness_run_project_hooks": false, "warn_error_options": {"include": [], "exclude": []}, "profiles_dir": "/Users/catherinefritz/.dbt", "macro_debugging": false, "require_explicit_package_overrides_for_builtin_materializations": true, "log_format_file": "debug", "empty_catalog": false, "compile": true, "log_level_file": "debug"}}